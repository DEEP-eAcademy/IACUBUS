--- typescript.js	2017-11-27 17:52:24.000000000 +0100
+++ typescript-old.js	2019-01-19 16:30:20.000000000 +0100
@@ -1,14 +1,14 @@
 /*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved. 
+Copyright (c) Microsoft Corporation. All rights reserved.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0  
- 
+License at http://www.apache.org/licenses/LICENSE-2.0
+
 THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
-MERCHANTABLITY OR NON-INFRINGEMENT. 
- 
+WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+MERCHANTABLITY OR NON-INFRINGEMENT.
+
 See the Apache Version 2.0 License for specific language governing permissions
 and limitations under the License.
 ***************************************************************************** */
@@ -8373,20 +8373,28 @@
                 return true;
             case 149 /* PropertyDeclaration */:
                 // property declarations are valid if their parent is a class declaration.
-                return node.parent.kind === 229 /* ClassDeclaration */;
+                // return node.parent.kind === 229 /* ClassDeclaration */;
+                return (node.parent && node.parent.kind === 229) || (node.original && node.original.parent && node.original.parent.kind === 229);
             case 153 /* GetAccessor */:
             case 154 /* SetAccessor */:
             case 151 /* MethodDeclaration */:
                 // if this method has a body and its parent is a class declaration, this is a valid target.
-                return node.body !== undefined
-                    && node.parent.kind === 229 /* ClassDeclaration */;
+                return node.body !== undefined &&
+                    // && node.parent.kind === 229 /* ClassDeclaration */;
+                    (node.parent && node.parent.kind === 229) || (node.original && node.original.parent && node.original.parent.kind === 229);
             case 146 /* Parameter */:
                 // if the parameter's parent has a body and its grandparent is a class declaration, this is a valid target;
-                return node.parent.body !== undefined
-                    && (node.parent.kind === 152 /* Constructor */
-                        || node.parent.kind === 151 /* MethodDeclaration */
-                        || node.parent.kind === 154 /* SetAccessor */)
-                    && node.parent.parent.kind === 229 /* ClassDeclaration */;
+                // return node.parent.body !== undefined
+                //     && (node.parent.kind === 152 /* Constructor */
+                //         || node.parent.kind === 151 /* MethodDeclaration */
+                //         || node.parent.kind === 154 /* SetAccessor */)
+                //     && node.parent.parent.kind === 229 /* ClassDeclaration */;
+
+                var parent = node.parent || (node.original && node.original.parent);
+                return parent && parent.body !== undefined &&
+                    (parent.kind === 152
+                        || parent.kind === 151
+                        || parent.kind === 154) && parent.parent.kind === 229;
         }
         return false;
     }
@@ -17628,8 +17636,8 @@
         }
         function parseClassExpression() {
             return parseClassDeclarationOrExpression(
-            /*fullStart*/ scanner.getStartPos(), 
-            /*decorators*/ undefined, 
+            /*fullStart*/ scanner.getStartPos(),
+            /*decorators*/ undefined,
             /*modifiers*/ undefined, 199 /* ClassExpression */);
         }
         function parseClassDeclaration(fullStart, decorators, modifiers) {
@@ -21611,7 +21619,7 @@
                 return false;
             }
             if (currentFlow === unreachableFlow) {
-                var reportError = 
+                var reportError =
                 // report error on all statements except empty ones
                 (ts.isStatementButNotDeclaration(node) && node.kind !== 209 /* EmptyStatement */) ||
                     // report error on class declarations
@@ -26208,7 +26216,7 @@
                         else {
                             var propertyTypeNode = propertyType ? typeToTypeNodeHelper(propertyType, context) : ts.createKeywordTypeNode(119 /* AnyKeyword */);
                             var modifiers = isReadonlySymbol(propertySymbol) ? [ts.createToken(131 /* ReadonlyKeyword */)] : undefined;
-                            var propertySignature = ts.createPropertySignature(modifiers, propertyName, optionalToken, propertyTypeNode, 
+                            var propertySignature = ts.createPropertySignature(modifiers, propertyName, optionalToken, propertyTypeNode,
                             /*initializer*/ undefined);
                             typeElements.push(propertySignature);
                         }
@@ -26233,10 +26241,10 @@
                 var name = ts.getNameFromIndexInfo(indexInfo) || "x";
                 var indexerTypeNode = ts.createKeywordTypeNode(kind === 0 /* String */ ? 136 /* StringKeyword */ : 133 /* NumberKeyword */);
                 var indexingParameter = ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, 
-                /*dotDotDotToken*/ undefined, name, 
-                /*questionToken*/ undefined, indexerTypeNode, 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined,
+                /*dotDotDotToken*/ undefined, name,
+                /*questionToken*/ undefined, indexerTypeNode,
                 /*initializer*/ undefined);
                 var typeNode = typeToTypeNodeHelper(indexInfo.type, context);
                 return ts.createIndexSignature(
@@ -26285,9 +26293,9 @@
                 if (isTransientSymbol(parameterSymbol) && parameterSymbol.isRestParameter) {
                     // special-case synthetic rest parameters in JS files
                     return ts.createParameter(
-                    /*decorators*/ undefined, 
-                    /*modifiers*/ undefined, parameterSymbol.isRestParameter ? ts.createToken(24 /* DotDotDotToken */) : undefined, "args", 
-                    /*questionToken*/ undefined, typeToTypeNodeHelper(anyArrayType, context), 
+                    /*decorators*/ undefined,
+                    /*modifiers*/ undefined, parameterSymbol.isRestParameter ? ts.createToken(24 /* DotDotDotToken */) : undefined, "args",
+                    /*questionToken*/ undefined, typeToTypeNodeHelper(anyArrayType, context),
                     /*initializer*/ undefined);
                 }
                 var modifiers = parameterDeclaration.modifiers && parameterDeclaration.modifiers.map(ts.getSynthesizedClone);
@@ -26304,7 +26312,7 @@
                 }
                 var parameterTypeNode = typeToTypeNodeHelper(parameterType, context);
                 var parameterNode = ts.createParameter(
-                /*decorators*/ undefined, modifiers, dotDotDotToken, name, questionToken, parameterTypeNode, 
+                /*decorators*/ undefined, modifiers, dotDotDotToken, name, questionToken, parameterTypeNode,
                 /*initializer*/ undefined);
                 return parameterNode;
                 function cloneBindingName(node) {
@@ -30585,7 +30593,7 @@
                 // We are attempting to construct a type of the form X & (A | B) & Y. Transform this into a type of
                 // the form X & A & Y | X & B & Y and recursively reduce until no union type constituents remain.
                 var unionType = typeSet[unionIndex];
-                return getUnionType(ts.map(unionType.types, function (t) { return getIntersectionType(ts.replaceElement(typeSet, unionIndex, t)); }), 
+                return getUnionType(ts.map(unionType.types, function (t) { return getIntersectionType(ts.replaceElement(typeSet, unionIndex, t)); }),
                 /*subtypeReduction*/ false, aliasSymbol, aliasTypeArguments);
             }
             var id = getTypeListId(typeSet);
@@ -31192,7 +31200,7 @@
             if (signature.typePredicate) {
                 freshTypePredicate = cloneTypePredicate(signature.typePredicate, mapper);
             }
-            var result = createSignature(signature.declaration, freshTypeParameters, signature.thisParameter && instantiateSymbol(signature.thisParameter, mapper), instantiateList(signature.parameters, mapper, instantiateSymbol), 
+            var result = createSignature(signature.declaration, freshTypeParameters, signature.thisParameter && instantiateSymbol(signature.thisParameter, mapper), instantiateList(signature.parameters, mapper, instantiateSymbol),
             /*resolvedReturnType*/ undefined, freshTypePredicate, signature.minArgumentCount, signature.hasRestParameter, signature.hasLiteralTypes);
             result.target = signature;
             result.mapper = mapper;
@@ -31482,7 +31490,7 @@
             return checkTypeRelatedTo(source, target, comparableRelation, errorNode, headMessage, containingMessageChain);
         }
         function isSignatureAssignableTo(source, target, ignoreReturnTypes) {
-            return compareSignaturesRelated(source, target, 0 /* None */, ignoreReturnTypes, /*reportErrors*/ false, 
+            return compareSignaturesRelated(source, target, 0 /* None */, ignoreReturnTypes, /*reportErrors*/ false,
             /*errorReporter*/ undefined, compareTypesAssignable) !== 0 /* False */;
         }
         /**
@@ -40351,13 +40359,13 @@
                         if (nodeIsYieldStar) {
                             checkTypeAssignableTo(functionFlags & 2 /* Async */
                                 ? getAwaitedType(expressionElementType, node.expression, ts.Diagnostics.Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
-                                : expressionElementType, signatureElementType, node.expression, 
+                                : expressionElementType, signatureElementType, node.expression,
                             /*headMessage*/ undefined);
                         }
                         else {
                             checkTypeAssignableTo(functionFlags & 2 /* Async */
                                 ? getAwaitedType(expressionType, node.expression, ts.Diagnostics.Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
-                                : expressionType, signatureElementType, node.expression, 
+                                : expressionType, signatureElementType, node.expression,
                             /*headMessage*/ undefined);
                         }
                     }
@@ -40731,7 +40739,7 @@
                     }
                     else {
                         var leadingError = ts.chainDiagnosticMessages(/*details*/ undefined, ts.Diagnostics.A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type);
-                        checkTypeAssignableTo(typePredicate.type, getTypeOfNode(parent.parameters[typePredicate.parameterIndex]), node.type, 
+                        checkTypeAssignableTo(typePredicate.type, getTypeOfNode(parent.parameters[typePredicate.parameterIndex]), node.type,
                         /*headMessage*/ undefined, leadingError);
                     }
                 }
@@ -42085,7 +42093,7 @@
                 // Since the javascript won't do semantic analysis like typescript,
                 // if the javascript file comes before the typescript file and both contain same name functions,
                 // checkFunctionOrConstructorSymbol wouldn't be called if we didnt ignore javascript function.
-                var firstDeclaration = ts.find(localSymbol.declarations, 
+                var firstDeclaration = ts.find(localSymbol.declarations,
                 // Get first non javascript function declaration
                 function (declaration) { return declaration.kind === node.kind && !(declaration.flags & 65536 /* JavaScriptFile */); });
                 // Only type check the symbol once
@@ -44326,7 +44334,7 @@
             if (!node.parent.parent.moduleSpecifier) {
                 var exportedName = node.propertyName || node.name;
                 // find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)
-                var symbol = resolveName(exportedName, exportedName.escapedText, 107455 /* Value */ | 793064 /* Type */ | 1920 /* Namespace */ | 2097152 /* Alias */, 
+                var symbol = resolveName(exportedName, exportedName.escapedText, 107455 /* Value */ | 793064 /* Type */ | 1920 /* Namespace */ | 2097152 /* Alias */,
                 /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
                 if (symbol && (symbol === undefinedSymbol || isGlobalSourceFile(getDeclarationContainer(symbol.declarations[0])))) {
                     error(exportedName, ts.Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, ts.idText(exportedName));
@@ -44891,7 +44899,7 @@
                 }
             }
             if (entityName.parent.kind === 243 /* ExportAssignment */ && ts.isEntityNameExpression(entityName)) {
-                return resolveEntityName(entityName, 
+                return resolveEntityName(entityName,
                 /*all meanings*/ 107455 /* Value */ | 793064 /* Type */ | 1920 /* Namespace */ | 2097152 /* Alias */);
             }
             if (entityName.kind !== 179 /* PropertyAccessExpression */ && isInRightSideOfImportOrExportAssignment(entityName)) {
@@ -49202,24 +49210,24 @@
     ts.updateBundle = updateBundle;
     function createImmediatelyInvokedFunctionExpression(statements, param, paramValue) {
         return createCall(createFunctionExpression(
-        /*modifiers*/ undefined, 
-        /*asteriskToken*/ undefined, 
-        /*name*/ undefined, 
-        /*typeParameters*/ undefined, 
-        /*parameters*/ param ? [param] : [], 
-        /*type*/ undefined, createBlock(statements, /*multiLine*/ true)), 
-        /*typeArguments*/ undefined, 
+        /*modifiers*/ undefined,
+        /*asteriskToken*/ undefined,
+        /*name*/ undefined,
+        /*typeParameters*/ undefined,
+        /*parameters*/ param ? [param] : [],
+        /*type*/ undefined, createBlock(statements, /*multiLine*/ true)),
+        /*typeArguments*/ undefined,
         /*argumentsArray*/ paramValue ? [paramValue] : []);
     }
     ts.createImmediatelyInvokedFunctionExpression = createImmediatelyInvokedFunctionExpression;
     function createImmediatelyInvokedArrowFunction(statements, param, paramValue) {
         return createCall(createArrowFunction(
-        /*modifiers*/ undefined, 
-        /*typeParameters*/ undefined, 
-        /*parameters*/ param ? [param] : [], 
-        /*type*/ undefined, 
-        /*equalsGreaterThanToken*/ undefined, createBlock(statements, /*multiLine*/ true)), 
-        /*typeArguments*/ undefined, 
+        /*modifiers*/ undefined,
+        /*typeParameters*/ undefined,
+        /*parameters*/ param ? [param] : [],
+        /*type*/ undefined,
+        /*equalsGreaterThanToken*/ undefined, createBlock(statements, /*multiLine*/ true)),
+        /*typeArguments*/ undefined,
         /*argumentsArray*/ paramValue ? [paramValue] : []);
     }
     ts.createImmediatelyInvokedArrowFunction = createImmediatelyInvokedArrowFunction;
@@ -49631,14 +49639,14 @@
     }
     ts.createMemberAccessForPropertyName = createMemberAccessForPropertyName;
     function createFunctionCall(func, thisArg, argumentsList, location) {
-        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(func, "call"), 
+        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(func, "call"),
         /*typeArguments*/ undefined, [
             thisArg
         ].concat(argumentsList)), location);
     }
     ts.createFunctionCall = createFunctionCall;
     function createFunctionApply(func, thisArg, argumentsExpression, location) {
-        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(func, "apply"), 
+        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(func, "apply"),
         /*typeArguments*/ undefined, [
             thisArg,
             argumentsExpression
@@ -49654,12 +49662,12 @@
     }
     ts.createArraySlice = createArraySlice;
     function createArrayConcat(array, values) {
-        return ts.createCall(ts.createPropertyAccess(array, "concat"), 
+        return ts.createCall(ts.createPropertyAccess(array, "concat"),
         /*typeArguments*/ undefined, values);
     }
     ts.createArrayConcat = createArrayConcat;
     function createMathPow(left, right, location) {
-        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Math"), "pow"), 
+        return ts.setTextRange(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Math"), "pow"),
         /*typeArguments*/ undefined, [left, right]), location);
     }
     ts.createMathPow = createMathPow;
@@ -49710,7 +49718,7 @@
                 argumentsList.push(children[0]);
             }
         }
-        return ts.setTextRange(ts.createCall(createJsxFactoryExpression(jsxFactoryEntity, reactNamespace, parentElement), 
+        return ts.setTextRange(ts.createCall(createJsxFactoryExpression(jsxFactoryEntity, reactNamespace, parentElement),
         /*typeArguments*/ undefined, argumentsList), location);
     }
     ts.createExpressionForJsxElement = createExpressionForJsxElement;
@@ -49730,7 +49738,7 @@
                 argumentsList.push(children[0]);
             }
         }
-        return ts.setTextRange(ts.createCall(createJsxFactoryExpression(jsxFactoryEntity, reactNamespace, parentElement), 
+        return ts.setTextRange(ts.createCall(createJsxFactoryExpression(jsxFactoryEntity, reactNamespace, parentElement),
         /*typeArguments*/ undefined, argumentsList), location);
     }
     ts.createExpressionForJsxFragment = createExpressionForJsxFragment;
@@ -49746,7 +49754,7 @@
     };
     function createValuesHelper(context, expression, location) {
         context.requestEmitHelper(valuesHelper);
-        return ts.setTextRange(ts.createCall(getHelperName("__values"), 
+        return ts.setTextRange(ts.createCall(getHelperName("__values"),
         /*typeArguments*/ undefined, [expression]), location);
     }
     ts.createValuesHelper = createValuesHelper;
@@ -49757,7 +49765,7 @@
     };
     function createReadHelper(context, iteratorRecord, count, location) {
         context.requestEmitHelper(readHelper);
-        return ts.setTextRange(ts.createCall(getHelperName("__read"), 
+        return ts.setTextRange(ts.createCall(getHelperName("__read"),
         /*typeArguments*/ undefined, count !== undefined
             ? [iteratorRecord, ts.createLiteral(count)]
             : [iteratorRecord]), location);
@@ -49771,7 +49779,7 @@
     function createSpreadHelper(context, argumentList, location) {
         context.requestEmitHelper(readHelper);
         context.requestEmitHelper(spreadHelper);
-        return ts.setTextRange(ts.createCall(getHelperName("__spread"), 
+        return ts.setTextRange(ts.createCall(getHelperName("__spread"),
         /*typeArguments*/ undefined, argumentList), location);
     }
     ts.createSpreadHelper = createSpreadHelper;
@@ -49779,10 +49787,10 @@
     function createForOfBindingStatement(node, boundValue) {
         if (ts.isVariableDeclarationList(node)) {
             var firstDeclaration = ts.firstOrUndefined(node.declarations);
-            var updatedDeclaration = ts.updateVariableDeclaration(firstDeclaration, firstDeclaration.name, 
+            var updatedDeclaration = ts.updateVariableDeclaration(firstDeclaration, firstDeclaration.name,
             /*typeNode*/ undefined, boundValue);
             return ts.setTextRange(ts.createVariableStatement(
-            /*modifiers*/ undefined, ts.updateVariableDeclarationList(node, [updatedDeclaration])), 
+            /*modifiers*/ undefined, ts.updateVariableDeclarationList(node, [updatedDeclaration])),
             /*location*/ node);
         }
         else {
@@ -49941,10 +49949,10 @@
         if (property === firstAccessor) {
             var properties_9 = [];
             if (getAccessor) {
-                var getterFunction = ts.createFunctionExpression(getAccessor.modifiers, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, getAccessor.parameters, 
+                var getterFunction = ts.createFunctionExpression(getAccessor.modifiers,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined, getAccessor.parameters,
                 /*type*/ undefined, getAccessor.body);
                 ts.setTextRange(getterFunction, getAccessor);
                 ts.setOriginalNode(getterFunction, getAccessor);
@@ -49952,10 +49960,10 @@
                 properties_9.push(getter);
             }
             if (setAccessor) {
-                var setterFunction = ts.createFunctionExpression(setAccessor.modifiers, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, setAccessor.parameters, 
+                var setterFunction = ts.createFunctionExpression(setAccessor.modifiers,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined, setAccessor.parameters,
                 /*type*/ undefined, setAccessor.body);
                 ts.setTextRange(setterFunction, setAccessor);
                 ts.setOriginalNode(setterFunction, setAccessor);
@@ -49964,12 +49972,12 @@
             }
             properties_9.push(ts.createPropertyAssignment("enumerable", ts.createTrue()));
             properties_9.push(ts.createPropertyAssignment("configurable", ts.createTrue()));
-            var expression = ts.setTextRange(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"), 
+            var expression = ts.setTextRange(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"),
             /*typeArguments*/ undefined, [
                 receiver,
                 createExpressionForPropertyName(property.name),
                 ts.createObjectLiteral(properties_9, multiLine)
-            ]), 
+            ]),
             /*location*/ firstAccessor);
             return ts.aggregateTransformFlags(expression);
         }
@@ -49979,18 +49987,18 @@
         return ts.aggregateTransformFlags(ts.setOriginalNode(ts.setTextRange(ts.createAssignment(createMemberAccessForPropertyName(receiver, property.name, /*location*/ property.name), property.initializer), property), property));
     }
     function createExpressionForShorthandPropertyAssignment(property, receiver) {
-        return ts.aggregateTransformFlags(ts.setOriginalNode(ts.setTextRange(ts.createAssignment(createMemberAccessForPropertyName(receiver, property.name, /*location*/ property.name), ts.getSynthesizedClone(property.name)), 
-        /*location*/ property), 
+        return ts.aggregateTransformFlags(ts.setOriginalNode(ts.setTextRange(ts.createAssignment(createMemberAccessForPropertyName(receiver, property.name, /*location*/ property.name), ts.getSynthesizedClone(property.name)),
+        /*location*/ property),
         /*original*/ property));
     }
     function createExpressionForMethodDeclaration(method, receiver) {
-        return ts.aggregateTransformFlags(ts.setOriginalNode(ts.setTextRange(ts.createAssignment(createMemberAccessForPropertyName(receiver, method.name, /*location*/ method.name), ts.setOriginalNode(ts.setTextRange(ts.createFunctionExpression(method.modifiers, method.asteriskToken, 
-        /*name*/ undefined, 
-        /*typeParameters*/ undefined, method.parameters, 
-        /*type*/ undefined, method.body), 
-        /*location*/ method), 
-        /*original*/ method)), 
-        /*location*/ method), 
+        return ts.aggregateTransformFlags(ts.setOriginalNode(ts.setTextRange(ts.createAssignment(createMemberAccessForPropertyName(receiver, method.name, /*location*/ method.name), ts.setOriginalNode(ts.setTextRange(ts.createFunctionExpression(method.modifiers, method.asteriskToken,
+        /*name*/ undefined,
+        /*typeParameters*/ undefined, method.parameters,
+        /*type*/ undefined, method.body),
+        /*location*/ method),
+        /*original*/ method)),
+        /*location*/ method),
         /*original*/ method));
     }
     /**
@@ -52147,7 +52155,7 @@
         }
         var externalHelpersModuleName = ts.getOrCreateExternalHelpersModuleNameIfNeeded(sourceFile, compilerOptions, hasExportStarsToExportValues);
         var externalHelpersImportDeclaration = externalHelpersModuleName && ts.createImportDeclaration(
-        /*decorators*/ undefined, 
+        /*decorators*/ undefined,
         /*modifiers*/ undefined, ts.createImportClause(/*name*/ undefined, ts.createNamespaceImport(externalHelpersModuleName)), ts.createLiteral(ts.externalHelpersModuleNameText));
         if (externalHelpersImportDeclaration) {
             externalImports.unshift(externalHelpersImportDeclaration);
@@ -52338,7 +52346,7 @@
         }
         for (var _i = 0, pendingDeclarations_1 = pendingDeclarations; _i < pendingDeclarations_1.length; _i++) {
             var _a = pendingDeclarations_1[_i], pendingExpressions_1 = _a.pendingExpressions, name = _a.name, value = _a.value, location = _a.location, original = _a.original;
-            var variable = ts.createVariableDeclaration(name, 
+            var variable = ts.createVariableDeclaration(name,
             /*type*/ undefined, pendingExpressions_1 ? ts.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);
             variable.original = original;
             ts.setTextRange(variable, location);
@@ -52468,7 +52476,7 @@
             // Read the elements of the iterable into an array
             value = ensureIdentifier(flattenContext, ts.createReadHelper(flattenContext.context, value, numElements > 0 && ts.getRestIndicatorOfBindingOrAssignmentElement(elements[numElements - 1])
                 ? undefined
-                : numElements, location), 
+                : numElements, location),
             /*reuseIdentifierExpressions*/ false, location);
         }
         else if (numElements !== 1 && (flattenContext.level < 1 /* ObjectRest */ || numElements === 0)
@@ -52633,7 +52641,7 @@
                 }
             }
         }
-        return ts.createCall(ts.getHelperName("__rest"), 
+        return ts.createCall(ts.getHelperName("__rest"),
         /*typeArguments*/ undefined, [
             value,
             ts.setTextRange(ts.createArrayLiteral(propertyNames), location)
@@ -53190,7 +53198,7 @@
                 ts.setEmitFlags(iife, 33554432 /* TypeScriptClassWrapper */);
                 var varStatement = ts.createVariableStatement(
                 /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                    ts.createVariableDeclaration(ts.getLocalName(node, /*allowComments*/ false, /*allowSourceMaps*/ false), 
+                    ts.createVariableDeclaration(ts.getLocalName(node, /*allowComments*/ false, /*allowSourceMaps*/ false),
                     /*type*/ undefined, iife)
                 ]));
                 ts.setOriginalNode(varStatement, node);
@@ -53236,7 +53244,7 @@
                 ? ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier)
                 : undefined;
             var classDeclaration = ts.createClassDeclaration(
-            /*decorators*/ undefined, modifiers, name, 
+            /*decorators*/ undefined, modifiers, name,
             /*typeParameters*/ undefined, ts.visitNodes(node.heritageClauses, visitor, ts.isHeritageClause), transformClassMembers(node, (facts & 64 /* IsDerivedClass */) !== 0));
             // To better align with the old emitter, we should not emit a trailing source map
             // entry if the class has static properties.
@@ -53354,7 +53362,7 @@
             //                                         or decoratedClassAlias if the class contain self-reference.
             var statement = ts.createVariableStatement(
             /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                ts.createVariableDeclaration(declName, 
+                ts.createVariableDeclaration(declName,
                 /*type*/ undefined, classAlias ? ts.createAssignment(classAlias, classExpression) : classExpression)
             ], 1 /* Let */));
             ts.setOriginalNode(statement, node);
@@ -53376,7 +53384,7 @@
             var heritageClauses = ts.visitNodes(node.heritageClauses, visitor, ts.isHeritageClause);
             var members = transformClassMembers(node, ts.some(heritageClauses, function (c) { return c.token === 85 /* ExtendsKeyword */; }));
             var classExpression = ts.createClassExpression(
-            /*modifiers*/ undefined, node.name, 
+            /*modifiers*/ undefined, node.name,
             /*typeParameters*/ undefined, heritageClauses, members);
             ts.setOriginalNode(classExpression, node);
             ts.setTextRange(classExpression, node);
@@ -53437,7 +53445,7 @@
             //      ${body}
             //  }
             return ts.startOnNewLine(ts.setOriginalNode(ts.setTextRange(ts.createConstructor(
-            /*decorators*/ undefined, 
+            /*decorators*/ undefined,
             /*modifiers*/ undefined, parameters, body), constructor || node), constructor));
         }
         /**
@@ -53499,7 +53507,7 @@
                 //
                 //  super(...arguments);
                 //
-                statements.push(ts.createStatement(ts.createCall(ts.createSuper(), 
+                statements.push(ts.createStatement(ts.createCall(ts.createSuper(),
                 /*typeArguments*/ undefined, [ts.createSpread(ts.createIdentifier("arguments"))])));
             }
             // Add the property initializers. Transforms this:
@@ -53520,9 +53528,9 @@
             }
             // End the lexical environment.
             statements = ts.mergeLexicalEnvironment(statements, endLexicalEnvironment());
-            return ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), 
-            /*location*/ constructor ? constructor.body.statements : node.members), 
-            /*multiLine*/ true), 
+            return ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements),
+            /*location*/ constructor ? constructor.body.statements : node.members),
+            /*multiLine*/ true),
             /*location*/ constructor ? constructor.body : undefined);
         }
         /**
@@ -53967,7 +53975,7 @@
                 expressions = [];
                 for (var _i = 0, decorators_1 = decorators; _i < decorators_1.length; _i++) {
                     var decorator = decorators_1[_i];
-                    var helper = createParamHelper(context, transformDecorator(decorator), parameterOffset, 
+                    var helper = createParamHelper(context, transformDecorator(decorator), parameterOffset,
                     /*location*/ decorator.expression);
                     ts.setEmitFlags(helper, 1536 /* NoComments */);
                     expressions.push(helper);
@@ -54410,7 +54418,7 @@
          * @param node The ExpressionWithTypeArguments to transform.
          */
         function visitExpressionWithTypeArguments(node) {
-            return ts.updateExpressionWithTypeArguments(node, 
+            return ts.updateExpressionWithTypeArguments(node,
             /*typeArguments*/ undefined, ts.visitNode(node.expression, visitor, ts.isLeftHandSideExpression));
         }
         /**
@@ -54442,10 +54450,10 @@
             if (!shouldEmitFunctionLikeDeclaration(node)) {
                 return undefined;
             }
-            var updated = ts.updateMethod(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, visitPropertyNameOfClassElement(node), 
-            /*questionToken*/ undefined, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateMethod(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, visitPropertyNameOfClassElement(node),
+            /*questionToken*/ undefined,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.visitFunctionBody(node.body, visitor, context));
             if (updated !== node) {
                 // While we emit the source map for the node after skipping decorators and modifiers,
@@ -54477,8 +54485,8 @@
             if (!shouldEmitAccessorDeclaration(node)) {
                 return undefined;
             }
-            var updated = ts.updateGetAccessor(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), visitPropertyNameOfClassElement(node), ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateGetAccessor(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), visitPropertyNameOfClassElement(node), ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.visitFunctionBody(node.body, visitor, context) || ts.createBlock([]));
             if (updated !== node) {
                 // While we emit the source map for the node after skipping decorators and modifiers,
@@ -54501,7 +54509,7 @@
             if (!shouldEmitAccessorDeclaration(node)) {
                 return undefined;
             }
-            var updated = ts.updateSetAccessor(node, 
+            var updated = ts.updateSetAccessor(node,
             /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), visitPropertyNameOfClassElement(node), ts.visitParameterList(node.parameters, visitor, context), ts.visitFunctionBody(node.body, visitor, context) || ts.createBlock([]));
             if (updated !== node) {
                 // While we emit the source map for the node after skipping decorators and modifiers,
@@ -54525,9 +54533,9 @@
             if (!shouldEmitFunctionLikeDeclaration(node)) {
                 return ts.createNotEmittedStatement(node);
             }
-            var updated = ts.updateFunctionDeclaration(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateFunctionDeclaration(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.visitFunctionBody(node.body, visitor, context) || ts.createBlock([]));
             if (isExportOfNamespace(node)) {
                 var statements = [updated];
@@ -54548,8 +54556,8 @@
             if (!shouldEmitFunctionLikeDeclaration(node)) {
                 return ts.createOmittedExpression();
             }
-            var updated = ts.updateFunctionExpression(node, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateFunctionExpression(node, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.visitFunctionBody(node.body, visitor, context) || ts.createBlock([]));
             return updated;
         }
@@ -54559,8 +54567,8 @@
          * - The node has type annotations
          */
         function visitArrowFunction(node) {
-            var updated = ts.updateArrowFunction(node, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateArrowFunction(node, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier),
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, node.equalsGreaterThanToken, ts.visitFunctionBody(node.body, visitor, context));
             return updated;
         }
@@ -54579,9 +54587,9 @@
                 return undefined;
             }
             var parameter = ts.createParameter(
-            /*decorators*/ undefined, 
-            /*modifiers*/ undefined, node.dotDotDotToken, ts.visitNode(node.name, visitor, ts.isBindingName), 
-            /*questionToken*/ undefined, 
+            /*decorators*/ undefined,
+            /*modifiers*/ undefined, node.dotDotDotToken, ts.visitNode(node.name, visitor, ts.isBindingName),
+            /*questionToken*/ undefined,
             /*type*/ undefined, ts.visitNode(node.initializer, visitor, ts.isExpression));
             // While we emit the source map for the node after skipping decorators and modifiers,
             // we need to emit the comments for the original range.
@@ -54614,16 +54622,16 @@
         function transformInitializedVariable(node) {
             var name = node.name;
             if (ts.isBindingPattern(name)) {
-                return ts.flattenDestructuringAssignment(node, visitor, context, 0 /* All */, 
+                return ts.flattenDestructuringAssignment(node, visitor, context, 0 /* All */,
                 /*needsValue*/ false, createNamespaceExportExpression);
             }
             else {
-                return ts.setTextRange(ts.createAssignment(getNamespaceMemberNameWithSourceMapsAndWithoutComments(name), ts.visitNode(node.initializer, visitor, ts.isExpression)), 
+                return ts.setTextRange(ts.createAssignment(getNamespaceMemberNameWithSourceMapsAndWithoutComments(name), ts.visitNode(node.initializer, visitor, ts.isExpression)),
                 /*location*/ node);
             }
         }
         function visitVariableDeclaration(node) {
-            return ts.updateVariableDeclaration(node, ts.visitNode(node.name, visitor, ts.isBindingName), 
+            return ts.updateVariableDeclaration(node, ts.visitNode(node.name, visitor, ts.isBindingName),
             /*type*/ undefined, ts.visitNode(node.initializer, visitor, ts.isExpression));
         }
         /**
@@ -54664,11 +54672,11 @@
             return ts.createPartiallyEmittedExpression(expression, node);
         }
         function visitCallExpression(node) {
-            return ts.updateCall(node, ts.visitNode(node.expression, visitor, ts.isExpression), 
+            return ts.updateCall(node, ts.visitNode(node.expression, visitor, ts.isExpression),
             /*typeArguments*/ undefined, ts.visitNodes(node.arguments, visitor, ts.isExpression));
         }
         function visitNewExpression(node) {
-            return ts.updateNew(node, ts.visitNode(node.expression, visitor, ts.isExpression), 
+            return ts.updateNew(node, ts.visitNode(node.expression, visitor, ts.isExpression),
             /*typeArguments*/ undefined, ts.visitNodes(node.arguments, visitor, ts.isExpression));
         }
         /**
@@ -54727,11 +54735,11 @@
             //      ...
             //  })(x || (x = {}));
             var enumStatement = ts.createStatement(ts.createCall(ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)], 
-            /*type*/ undefined, transformEnumBody(node, containerName)), 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)],
+            /*type*/ undefined, transformEnumBody(node, containerName)),
             /*typeArguments*/ undefined, [moduleArg]));
             ts.setOriginalNode(enumStatement, node);
             ts.setTextRange(enumStatement, node);
@@ -54755,7 +54763,7 @@
             ts.addRange(statements, ts.map(node.members, transformEnumMember));
             ts.addRange(statements, endLexicalEnvironment());
             currentNamespaceContainerName = savedCurrentNamespaceLocalName;
-            return ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), /*location*/ node.members), 
+            return ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), /*location*/ node.members),
             /*multiLine*/ true);
         }
         /**
@@ -54943,11 +54951,11 @@
             //      x_1.y = ...;
             //  })(x || (x = {}));
             var moduleStatement = ts.createStatement(ts.createCall(ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)], 
-            /*type*/ undefined, transformModuleBody(node, containerName)), 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)],
+            /*type*/ undefined, transformModuleBody(node, containerName)),
             /*typeArguments*/ undefined, [moduleArg]));
             ts.setOriginalNode(moduleStatement, node);
             ts.setTextRange(moduleStatement, node);
@@ -54997,8 +55005,8 @@
             currentNamespaceContainerName = savedCurrentNamespaceContainerName;
             currentNamespace = savedCurrentNamespace;
             currentScopeFirstDeclarationsOfName = savedCurrentScopeFirstDeclarationsOfName;
-            var block = ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), 
-            /*location*/ statementsLocation), 
+            var block = ts.createBlock(ts.setTextRange(ts.createNodeArray(statements),
+            /*location*/ statementsLocation),
             /*multiLine*/ true);
             ts.setTextRange(block, blockLocation);
             // namespace hello.hi.world {
@@ -55046,8 +55054,8 @@
             // Elide the declaration if the import clause was elided.
             var importClause = ts.visitNode(node.importClause, visitImportClause, ts.isImportClause);
             return importClause
-                ? ts.updateImportDeclaration(node, 
-                /*decorators*/ undefined, 
+                ? ts.updateImportDeclaration(node,
+                /*decorators*/ undefined,
                 /*modifiers*/ undefined, importClause, node.moduleSpecifier)
                 : undefined;
         }
@@ -55117,8 +55125,8 @@
             // Elide the export declaration if all of its named exports are elided.
             var exportClause = ts.visitNode(node.exportClause, visitNamedExports, ts.isNamedExports);
             return exportClause
-                ? ts.updateExportDeclaration(node, 
-                /*decorators*/ undefined, 
+                ? ts.updateExportDeclaration(node,
+                /*decorators*/ undefined,
                 /*modifiers*/ undefined, exportClause, node.moduleSpecifier)
                 : undefined;
         }
@@ -55176,7 +55184,7 @@
                 //  export var ${name} = ${moduleReference};
                 //  var ${name} = ${moduleReference};
                 return ts.setOriginalNode(ts.setTextRange(ts.createVariableStatement(ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), ts.createVariableDeclarationList([
-                    ts.setOriginalNode(ts.createVariableDeclaration(node.name, 
+                    ts.setOriginalNode(ts.createVariableDeclaration(node.name,
                     /*type*/ undefined, moduleReference), node)
                 ])), node), node);
             }
@@ -55414,7 +55422,7 @@
                     var substitute = (applicableSubstitutions & 2 /* NamespaceExports */ && container.kind === 233 /* ModuleDeclaration */) ||
                         (applicableSubstitutions & 8 /* NonQualifiedEnumMembers */ && container.kind === 232 /* EnumDeclaration */);
                     if (substitute) {
-                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(container), node), 
+                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(container), node),
                         /*location*/ node);
                     }
                 }
@@ -55464,7 +55472,7 @@
             }
         }
         context.requestEmitHelper(decorateHelper);
-        return ts.setTextRange(ts.createCall(ts.getHelperName("__decorate"), 
+        return ts.setTextRange(ts.createCall(ts.getHelperName("__decorate"),
         /*typeArguments*/ undefined, argumentsArray), location);
     }
     var decorateHelper = {
@@ -55475,7 +55483,7 @@
     };
     function createMetadataHelper(context, metadataKey, metadataValue) {
         context.requestEmitHelper(metadataHelper);
-        return ts.createCall(ts.getHelperName("__metadata"), 
+        return ts.createCall(ts.getHelperName("__metadata"),
         /*typeArguments*/ undefined, [
             ts.createLiteral(metadataKey),
             metadataValue
@@ -55489,7 +55497,7 @@
     };
     function createParamHelper(context, expression, parameterOffset, location) {
         context.requestEmitHelper(paramHelper);
-        return ts.setTextRange(ts.createCall(ts.getHelperName("__param"), 
+        return ts.setTextRange(ts.createCall(ts.getHelperName("__param"),
         /*typeArguments*/ undefined, [
             ts.createLiteral(parameterOffset),
             expression
@@ -55584,10 +55592,10 @@
          * @param node The node to visit.
          */
         function visitMethodDeclaration(node) {
-            return ts.updateMethod(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name, 
-            /*questionToken*/ undefined, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            return ts.updateMethod(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name,
+            /*questionToken*/ undefined,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.getFunctionFlags(node) & 2 /* Async */
                 ? transformAsyncFunctionBody(node)
                 : ts.visitFunctionBody(node.body, visitor, context));
@@ -55601,9 +55609,9 @@
          * @param node The node to visit.
          */
         function visitFunctionDeclaration(node) {
-            return ts.updateFunctionDeclaration(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            return ts.updateFunctionDeclaration(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.getFunctionFlags(node) & 2 /* Async */
                 ? transformAsyncFunctionBody(node)
                 : ts.visitFunctionBody(node.body, visitor, context));
@@ -55617,8 +55625,8 @@
          * @param node The node to visit.
          */
         function visitFunctionExpression(node) {
-            return ts.updateFunctionExpression(node, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            return ts.updateFunctionExpression(node, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, ts.getFunctionFlags(node) & 2 /* Async */
                 ? transformAsyncFunctionBody(node)
                 : ts.visitFunctionBody(node.body, visitor, context));
@@ -55632,8 +55640,8 @@
          * @param node The node to visit.
          */
         function visitArrowFunction(node) {
-            return ts.updateArrowFunction(node, ts.visitNodes(node.modifiers, visitor, ts.isModifier), 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            return ts.updateArrowFunction(node, ts.visitNodes(node.modifiers, visitor, ts.isModifier),
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, node.equalsGreaterThanToken, ts.getFunctionFlags(node) & 2 /* Async */
                 ? transformAsyncFunctionBody(node)
                 : ts.visitFunctionBody(node.body, visitor, context));
@@ -55783,7 +55791,7 @@
                 var argumentExpression = ts.isPropertyAccessExpression(expression)
                     ? substitutePropertyAccessExpression(expression)
                     : substituteElementAccessExpression(expression);
-                return ts.createCall(ts.createPropertyAccess(argumentExpression, "call"), 
+                return ts.createCall(ts.createPropertyAccess(argumentExpression, "call"),
                 /*typeArguments*/ undefined, [
                     ts.createThis()
                 ].concat(node.arguments));
@@ -55800,11 +55808,11 @@
         }
         function createSuperAccessInAsyncMethod(argumentExpression, location) {
             if (enclosingSuperContainerFlags & 4096 /* AsyncMethodWithSuperBinding */) {
-                return ts.setTextRange(ts.createPropertyAccess(ts.createCall(ts.createIdentifier("_super"), 
+                return ts.setTextRange(ts.createPropertyAccess(ts.createCall(ts.createIdentifier("_super"),
                 /*typeArguments*/ undefined, [argumentExpression]), "value"), location);
             }
             else {
-                return ts.setTextRange(ts.createCall(ts.createIdentifier("_super"), 
+                return ts.setTextRange(ts.createCall(ts.createIdentifier("_super"),
                 /*typeArguments*/ undefined, [argumentExpression]), location);
             }
         }
@@ -55819,14 +55827,14 @@
     function createAwaiterHelper(context, hasLexicalArguments, promiseConstructor, body) {
         context.requestEmitHelper(awaiterHelper);
         var generatorFunc = ts.createFunctionExpression(
-        /*modifiers*/ undefined, ts.createToken(39 /* AsteriskToken */), 
-        /*name*/ undefined, 
-        /*typeParameters*/ undefined, 
-        /*parameters*/ [], 
+        /*modifiers*/ undefined, ts.createToken(39 /* AsteriskToken */),
+        /*name*/ undefined,
+        /*typeParameters*/ undefined,
+        /*parameters*/ [],
         /*type*/ undefined, body);
         // Mark this node as originally an async function
         (generatorFunc.emitNode || (generatorFunc.emitNode = {})).flags |= 262144 /* AsyncFunctionBody */ | 524288 /* ReuseTempVariableScope */;
-        return ts.createCall(ts.getHelperName("__awaiter"), 
+        return ts.createCall(ts.getHelperName("__awaiter"),
         /*typeArguments*/ undefined, [
             ts.createThis(),
             hasLexicalArguments ? ts.createIdentifier("arguments") : ts.createVoidZero(),
@@ -55940,7 +55948,7 @@
         }
         function visitAwaitExpression(node) {
             if (enclosingFunctionFlags & 2 /* Async */ && enclosingFunctionFlags & 1 /* Generator */) {
-                return ts.setOriginalNode(ts.setTextRange(ts.createYield(createAwaitHelper(context, ts.visitNode(node.expression, visitor, ts.isExpression))), 
+                return ts.setOriginalNode(ts.setTextRange(ts.createYield(createAwaitHelper(context, ts.visitNode(node.expression, visitor, ts.isExpression))),
                 /*location*/ node), node);
             }
             return ts.visitEachChild(node, visitor, context);
@@ -56082,7 +56090,7 @@
                 }
                 return ts.updateForOf(node, node.awaitModifier, ts.setTextRange(ts.createVariableDeclarationList([
                     ts.setTextRange(ts.createVariableDeclaration(temp), node.initializer)
-                ], 1 /* Let */), node.initializer), node.expression, ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation), 
+                ], 1 /* Let */), node.initializer), node.expression, ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation),
                 /*multiLine*/ true), bodyLocation));
             }
             return node;
@@ -56101,7 +56109,7 @@
             else {
                 statements.push(statement);
             }
-            return ts.setEmitFlags(ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation), 
+            return ts.setEmitFlags(ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation),
             /*multiLine*/ true), bodyLocation), 48 /* NoSourceMap */ | 384 /* NoTokenSourceMaps */);
         }
         function createDownlevelAwait(expression) {
@@ -56127,10 +56135,10 @@
             /*initializer*/ ts.setEmitFlags(ts.setTextRange(ts.createVariableDeclarationList([
                 ts.setTextRange(ts.createVariableDeclaration(iterator, /*type*/ undefined, callValues), node.expression),
                 ts.createVariableDeclaration(result)
-            ]), node.expression), 2097152 /* NoHoisting */), 
-            /*condition*/ ts.createComma(ts.createAssignment(result, createDownlevelAwait(callNext)), ts.createLogicalNot(getDone)), 
-            /*incrementor*/ undefined, 
-            /*statement*/ convertForOfStatementHead(node, createDownlevelAwait(getValue))), 
+            ]), node.expression), 2097152 /* NoHoisting */),
+            /*condition*/ ts.createComma(ts.createAssignment(result, createDownlevelAwait(callNext)), ts.createLogicalNot(getDone)),
+            /*incrementor*/ undefined,
+            /*statement*/ convertForOfStatementHead(node, createDownlevelAwait(getValue))),
             /*location*/ node), 256 /* NoTokenTrailingSourceMaps */);
             return ts.createTry(ts.createBlock([
                 ts.restoreEnclosingLabel(forStatement, outermostLabeledStatement)
@@ -56142,8 +56150,8 @@
                 ts.createTry(
                 /*tryBlock*/ ts.createBlock([
                     ts.setEmitFlags(ts.createIf(ts.createLogicalAnd(ts.createLogicalAnd(result, ts.createLogicalNot(getDone)), ts.createAssignment(returnMethod, ts.createPropertyAccess(iterator, "return"))), ts.createStatement(createDownlevelAwait(callReturn))), 1 /* SingleLine */)
-                ]), 
-                /*catchClause*/ undefined, 
+                ]),
+                /*catchClause*/ undefined,
                 /*finallyBlock*/ ts.setEmitFlags(ts.createBlock([
                     ts.setEmitFlags(ts.createIf(errorRecord, ts.createThrow(ts.createPropertyAccess(errorRecord, "error"))), 1 /* SingleLine */)
                 ]), 1 /* SingleLine */))
@@ -56153,10 +56161,10 @@
             if (node.transformFlags & 1048576 /* ContainsObjectRest */) {
                 // Binding patterns are converted into a generated name and are
                 // evaluated inside the function body.
-                return ts.updateParameter(node, 
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, node.dotDotDotToken, ts.getGeneratedNameForNode(node), 
-                /*questionToken*/ undefined, 
+                return ts.updateParameter(node,
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined, node.dotDotDotToken, ts.getGeneratedNameForNode(node),
+                /*questionToken*/ undefined,
                 /*type*/ undefined, ts.visitNode(node.initializer, visitor, ts.isExpression));
             }
             return ts.visitEachChild(node, visitor, context);
@@ -56164,7 +56172,7 @@
         function visitConstructorDeclaration(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = 0 /* Normal */;
-            var updated = ts.updateConstructor(node, 
+            var updated = ts.updateConstructor(node,
             /*decorators*/ undefined, node.modifiers, ts.visitParameterList(node.parameters, visitor, context), transformFunctionBody(node));
             enclosingFunctionFlags = savedEnclosingFunctionFlags;
             return updated;
@@ -56172,8 +56180,8 @@
         function visitGetAccessorDeclaration(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = 0 /* Normal */;
-            var updated = ts.updateGetAccessor(node, 
-            /*decorators*/ undefined, node.modifiers, ts.visitNode(node.name, visitor, ts.isPropertyName), ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateGetAccessor(node,
+            /*decorators*/ undefined, node.modifiers, ts.visitNode(node.name, visitor, ts.isPropertyName), ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, transformFunctionBody(node));
             enclosingFunctionFlags = savedEnclosingFunctionFlags;
             return updated;
@@ -56181,7 +56189,7 @@
         function visitSetAccessorDeclaration(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = 0 /* Normal */;
-            var updated = ts.updateSetAccessor(node, 
+            var updated = ts.updateSetAccessor(node,
             /*decorators*/ undefined, node.modifiers, ts.visitNode(node.name, visitor, ts.isPropertyName), ts.visitParameterList(node.parameters, visitor, context), transformFunctionBody(node));
             enclosingFunctionFlags = savedEnclosingFunctionFlags;
             return updated;
@@ -56189,13 +56197,13 @@
         function visitMethodDeclaration(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = ts.getFunctionFlags(node);
-            var updated = ts.updateMethod(node, 
+            var updated = ts.updateMethod(node,
             /*decorators*/ undefined, enclosingFunctionFlags & 1 /* Generator */
                 ? ts.visitNodes(node.modifiers, visitorNoAsyncModifier, ts.isModifier)
                 : node.modifiers, enclosingFunctionFlags & 2 /* Async */
                 ? undefined
-                : node.asteriskToken, ts.visitNode(node.name, visitor, ts.isPropertyName), ts.visitNode(/*questionToken*/ undefined, visitor, ts.isToken), 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+                : node.asteriskToken, ts.visitNode(node.name, visitor, ts.isPropertyName), ts.visitNode(/*questionToken*/ undefined, visitor, ts.isToken),
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, enclosingFunctionFlags & 2 /* Async */ && enclosingFunctionFlags & 1 /* Generator */
                 ? transformAsyncGeneratorFunctionBody(node)
                 : transformFunctionBody(node));
@@ -56205,13 +56213,13 @@
         function visitFunctionDeclaration(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = ts.getFunctionFlags(node);
-            var updated = ts.updateFunctionDeclaration(node, 
+            var updated = ts.updateFunctionDeclaration(node,
             /*decorators*/ undefined, enclosingFunctionFlags & 1 /* Generator */
                 ? ts.visitNodes(node.modifiers, visitorNoAsyncModifier, ts.isModifier)
                 : node.modifiers, enclosingFunctionFlags & 2 /* Async */
                 ? undefined
-                : node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+                : node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, enclosingFunctionFlags & 2 /* Async */ && enclosingFunctionFlags & 1 /* Generator */
                 ? transformAsyncGeneratorFunctionBody(node)
                 : transformFunctionBody(node));
@@ -56221,8 +56229,8 @@
         function visitArrowFunction(node) {
             var savedEnclosingFunctionFlags = enclosingFunctionFlags;
             enclosingFunctionFlags = ts.getFunctionFlags(node);
-            var updated = ts.updateArrowFunction(node, node.modifiers, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            var updated = ts.updateArrowFunction(node, node.modifiers,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, node.equalsGreaterThanToken, transformFunctionBody(node));
             enclosingFunctionFlags = savedEnclosingFunctionFlags;
             return updated;
@@ -56234,8 +56242,8 @@
                 ? ts.visitNodes(node.modifiers, visitorNoAsyncModifier, ts.isModifier)
                 : node.modifiers, enclosingFunctionFlags & 2 /* Async */
                 ? undefined
-                : node.asteriskToken, node.name, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+                : node.asteriskToken, node.name,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, enclosingFunctionFlags & 2 /* Async */ && enclosingFunctionFlags & 1 /* Generator */
                 ? transformAsyncGeneratorFunctionBody(node)
                 : transformFunctionBody(node));
@@ -56248,9 +56256,9 @@
             var statementOffset = ts.addPrologue(statements, node.body.statements, /*ensureUseStrict*/ false, visitor);
             appendObjectRestAssignmentsIfNeeded(statements, node);
             statements.push(ts.createReturn(createAsyncGeneratorHelper(context, ts.createFunctionExpression(
-            /*modifiers*/ undefined, ts.createToken(39 /* AsteriskToken */), node.name && ts.getGeneratedNameForNode(node.name), 
-            /*typeParameters*/ undefined, 
-            /*parameters*/ [], 
+            /*modifiers*/ undefined, ts.createToken(39 /* AsteriskToken */), node.name && ts.getGeneratedNameForNode(node.name),
+            /*typeParameters*/ undefined,
+            /*parameters*/ [],
             /*type*/ undefined, ts.updateBlock(node.body, ts.visitLexicalEnvironment(node.body.statements, visitor, context, statementOffset))))));
             ts.addRange(statements, endLexicalEnvironment());
             var block = ts.updateBlock(node.body, statements);
@@ -56291,8 +56299,8 @@
                 var parameter = _a[_i];
                 if (parameter.transformFlags & 1048576 /* ContainsObjectRest */) {
                     var temp = ts.getGeneratedNameForNode(parameter);
-                    var declarations = ts.flattenDestructuringBinding(parameter, visitor, context, 1 /* ObjectRest */, temp, 
-                    /*doNotRecordTempVariablesInLine*/ false, 
+                    var declarations = ts.flattenDestructuringBinding(parameter, visitor, context, 1 /* ObjectRest */, temp,
+                    /*doNotRecordTempVariablesInLine*/ false,
                     /*skipInitializer*/ true);
                     if (ts.some(declarations)) {
                         var statement = ts.createVariableStatement(
@@ -56384,7 +56392,7 @@
                 var argumentExpression = ts.isPropertyAccessExpression(expression)
                     ? substitutePropertyAccessExpression(expression)
                     : substituteElementAccessExpression(expression);
-                return ts.createCall(ts.createPropertyAccess(argumentExpression, "call"), 
+                return ts.createCall(ts.createPropertyAccess(argumentExpression, "call"),
                 /*typeArguments*/ undefined, [
                     ts.createThis()
                 ].concat(node.arguments));
@@ -56401,11 +56409,11 @@
         }
         function createSuperAccessInAsyncMethod(argumentExpression, location) {
             if (enclosingSuperContainerFlags & 4096 /* AsyncMethodWithSuperBinding */) {
-                return ts.setTextRange(ts.createPropertyAccess(ts.createCall(ts.createIdentifier("_super"), 
+                return ts.setTextRange(ts.createPropertyAccess(ts.createCall(ts.createIdentifier("_super"),
                 /*typeArguments*/ undefined, [argumentExpression]), "value"), location);
             }
             else {
-                return ts.setTextRange(ts.createCall(ts.createIdentifier("_super"), 
+                return ts.setTextRange(ts.createCall(ts.createIdentifier("_super"),
                 /*typeArguments*/ undefined, [argumentExpression]), location);
             }
         }
@@ -56419,11 +56427,11 @@
     };
     function createAssignHelper(context, attributesSegments) {
         if (context.getCompilerOptions().target >= 2 /* ES2015 */) {
-            return ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "assign"), 
+            return ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "assign"),
             /*typeArguments*/ undefined, attributesSegments);
         }
         context.requestEmitHelper(assignHelper);
-        return ts.createCall(ts.getHelperName("__assign"), 
+        return ts.createCall(ts.getHelperName("__assign"),
         /*typeArguments*/ undefined, attributesSegments);
     }
     ts.createAssignHelper = createAssignHelper;
@@ -56446,7 +56454,7 @@
         context.requestEmitHelper(asyncGeneratorHelper);
         // Mark this node as originally an async function
         (generatorFunc.emitNode || (generatorFunc.emitNode = {})).flags |= 262144 /* AsyncFunctionBody */;
-        return ts.createCall(ts.getHelperName("__asyncGenerator"), 
+        return ts.createCall(ts.getHelperName("__asyncGenerator"),
         /*typeArguments*/ undefined, [
             ts.createThis(),
             ts.createIdentifier("arguments"),
@@ -56461,7 +56469,7 @@
     function createAsyncDelegatorHelper(context, expression, location) {
         context.requestEmitHelper(awaitHelper);
         context.requestEmitHelper(asyncDelegator);
-        return ts.setTextRange(ts.createCall(ts.getHelperName("__asyncDelegator"), 
+        return ts.setTextRange(ts.createCall(ts.getHelperName("__asyncDelegator"),
         /*typeArguments*/ undefined, [expression]), location);
     }
     var asyncValues = {
@@ -56471,7 +56479,7 @@
     };
     function createAsyncValuesHelper(context, expression, location) {
         context.requestEmitHelper(asyncValues);
-        return ts.setTextRange(ts.createCall(ts.getHelperName("__asyncValues"), 
+        return ts.setTextRange(ts.createCall(ts.getHelperName("__asyncValues"),
         /*typeArguments*/ undefined, [expression]), location);
     }
 })(ts || (ts = {}));
@@ -57508,7 +57516,7 @@
             //          }
             //          return C;
             //      }());
-            var variable = ts.createVariableDeclaration(ts.getLocalName(node, /*allowComments*/ true), 
+            var variable = ts.createVariableDeclaration(ts.getLocalName(node, /*allowComments*/ true),
             /*type*/ undefined, transformClassLikeDeclarationToExpression(node));
             ts.setOriginalNode(variable, node);
             var statements = [];
@@ -57583,10 +57591,10 @@
             }
             var extendsClauseElement = ts.getClassExtendsHeritageClauseElement(node);
             var classFunction = ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, extendsClauseElement ? [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "_super")] : [], 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, extendsClauseElement ? [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "_super")] : [],
             /*type*/ undefined, transformClassBody(node, extendsClauseElement));
             // To preserve the behavior of the old emitter, we explicitly indent
             // the body of the function here if it was requested in an earlier
@@ -57602,7 +57610,7 @@
             var outer = ts.createPartiallyEmittedExpression(inner);
             outer.end = ts.skipTrivia(currentText, node.pos);
             ts.setEmitFlags(outer, 1536 /* NoComments */);
-            var result = ts.createParen(ts.createCall(outer, 
+            var result = ts.createParen(ts.createCall(outer,
             /*typeArguments*/ undefined, extendsClauseElement
                 ? [ts.visitNode(extendsClauseElement.expression, visitor, ts.isExpression)]
                 : []));
@@ -57647,7 +57655,7 @@
          */
         function addExtendsHelperIfNeeded(statements, node, extendsClauseElement) {
             if (extendsClauseElement) {
-                statements.push(ts.setTextRange(ts.createStatement(createExtendsHelper(context, ts.getLocalName(node))), 
+                statements.push(ts.setTextRange(ts.createStatement(createExtendsHelper(context, ts.getLocalName(node))),
                 /*location*/ extendsClauseElement));
             }
         }
@@ -57665,10 +57673,10 @@
             var constructor = ts.getFirstConstructorWithBody(node);
             var hasSynthesizedSuper = hasSynthesizedDefaultSuperCall(constructor, extendsClauseElement !== undefined);
             var constructorFunction = ts.createFunctionDeclaration(
-            /*decorators*/ undefined, 
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, ts.getInternalName(node), 
-            /*typeParameters*/ undefined, transformConstructorParameters(constructor, hasSynthesizedSuper), 
+            /*decorators*/ undefined,
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined, ts.getInternalName(node),
+            /*typeParameters*/ undefined, transformConstructorParameters(constructor, hasSynthesizedSuper),
             /*type*/ undefined, transformConstructorBody(constructor, node, extendsClauseElement, hasSynthesizedSuper));
             ts.setTextRange(constructorFunction, constructor || node);
             if (extendsClauseElement) {
@@ -57750,8 +57758,8 @@
             if (constructor) {
                 prependCaptureNewTargetIfNeeded(statements, constructor, /*copyOnWrite*/ false);
             }
-            var block = ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), 
-            /*location*/ constructor ? constructor.body.statements : node.members), 
+            var block = ts.createBlock(ts.setTextRange(ts.createNodeArray(statements),
+            /*location*/ constructor ? constructor.body.statements : node.members),
             /*multiLine*/ true);
             ts.setTextRange(block, constructor ? constructor.body : node);
             if (!constructor) {
@@ -57881,25 +57889,25 @@
                 // Binding patterns are converted into a generated name and are
                 // evaluated inside the function body.
                 return ts.setOriginalNode(ts.setTextRange(ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, 
-                /*dotDotDotToken*/ undefined, ts.getGeneratedNameForNode(node), 
-                /*questionToken*/ undefined, 
-                /*type*/ undefined, 
-                /*initializer*/ undefined), 
-                /*location*/ node), 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined,
+                /*dotDotDotToken*/ undefined, ts.getGeneratedNameForNode(node),
+                /*questionToken*/ undefined,
+                /*type*/ undefined,
+                /*initializer*/ undefined),
+                /*location*/ node),
                 /*original*/ node);
             }
             else if (node.initializer) {
                 // Initializers are elided
                 return ts.setOriginalNode(ts.setTextRange(ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, 
-                /*dotDotDotToken*/ undefined, node.name, 
-                /*questionToken*/ undefined, 
-                /*type*/ undefined, 
-                /*initializer*/ undefined), 
-                /*location*/ node), 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined,
+                /*dotDotDotToken*/ undefined, node.name,
+                /*questionToken*/ undefined,
+                /*type*/ undefined,
+                /*initializer*/ undefined),
+                /*location*/ node),
                 /*original*/ node);
             }
             else {
@@ -58016,9 +58024,9 @@
             // var param = [];
             statements.push(ts.setEmitFlags(ts.setTextRange(ts.createVariableStatement(
             /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                ts.createVariableDeclaration(declarationName, 
+                ts.createVariableDeclaration(declarationName,
                 /*type*/ undefined, ts.createArrayLiteral([]))
-            ])), 
+            ])),
             /*location*/ parameter), 1048576 /* CustomPrologue */));
             // for (var _i = restIndex; _i < arguments.length; _i++) {
             //   param[_i - restIndex] = arguments[_i];
@@ -58028,7 +58036,7 @@
             ]), parameter), ts.setTextRange(ts.createLessThan(temp, ts.createPropertyAccess(ts.createIdentifier("arguments"), "length")), parameter), ts.setTextRange(ts.createPostfixIncrement(temp), parameter), ts.createBlock([
                 ts.startOnNewLine(ts.setTextRange(ts.createStatement(ts.createAssignment(ts.createElementAccess(expressionName, restIndex === 0
                     ? temp
-                    : ts.createSubtract(temp, ts.createLiteral(restIndex))), ts.createElementAccess(ts.createIdentifier("arguments"), temp))), 
+                    : ts.createSubtract(temp, ts.createLiteral(restIndex))), ts.createElementAccess(ts.createIdentifier("arguments"), temp))),
                 /*location*/ parameter))
             ]));
             ts.setEmitFlags(forStatement, 1048576 /* CustomPrologue */);
@@ -58050,7 +58058,7 @@
             enableSubstitutionsForCapturedThis();
             var captureThisStatement = ts.createVariableStatement(
             /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                ts.createVariableDeclaration("_this", 
+                ts.createVariableDeclaration("_this",
                 /*type*/ undefined, initializer)
             ]));
             ts.setEmitFlags(captureThisStatement, 1536 /* NoComments */ | 1048576 /* CustomPrologue */);
@@ -58088,7 +58096,7 @@
                 }
                 var captureNewTargetStatement = ts.createVariableStatement(
                 /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                    ts.createVariableDeclaration("_newTarget", 
+                    ts.createVariableDeclaration("_newTarget",
                     /*type*/ undefined, newTarget)
                 ]));
                 if (copyOnWrite) {
@@ -58153,7 +58161,7 @@
             var memberFunction = transformFunctionLikeToExpression(member, /*location*/ member, /*name*/ undefined, container);
             ts.setEmitFlags(memberFunction, 1536 /* NoComments */);
             ts.setSourceMapRange(memberFunction, sourceMapRange);
-            var statement = ts.setTextRange(ts.createStatement(ts.createAssignment(memberName, memberFunction)), 
+            var statement = ts.setTextRange(ts.createStatement(ts.createAssignment(memberName, memberFunction)),
             /*location*/ member);
             ts.setOriginalNode(statement, member);
             ts.setCommentRange(statement, commentRange);
@@ -58214,7 +58222,7 @@
                 properties.push(setter);
             }
             properties.push(ts.createPropertyAssignment("enumerable", ts.createTrue()), ts.createPropertyAssignment("configurable", ts.createTrue()));
-            var call = ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"), 
+            var call = ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"),
             /*typeArguments*/ undefined, [
                 target,
                 propertyName,
@@ -58239,10 +58247,10 @@
             convertedLoopState = undefined;
             var ancestorFacts = enterSubtree(16256 /* ArrowFunctionExcludes */, 66 /* ArrowFunctionIncludes */);
             var func = ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
             /*type*/ undefined, transformFunctionBody(node));
             ts.setTextRange(func, node);
             ts.setOriginalNode(func, node);
@@ -58271,9 +58279,9 @@
                 : node.name;
             exitSubtree(ancestorFacts, 49152 /* PropagateNewTargetMask */, 0 /* None */);
             convertedLoopState = savedConvertedLoopState;
-            return ts.updateFunctionExpression(node, 
-            /*modifiers*/ undefined, node.asteriskToken, name, 
-            /*typeParameters*/ undefined, parameters, 
+            return ts.updateFunctionExpression(node,
+            /*modifiers*/ undefined, node.asteriskToken, name,
+            /*typeParameters*/ undefined, parameters,
             /*type*/ undefined, body);
         }
         /**
@@ -58294,9 +58302,9 @@
                 : node.name;
             exitSubtree(ancestorFacts, 49152 /* PropagateNewTargetMask */, 0 /* None */);
             convertedLoopState = savedConvertedLoopState;
-            return ts.updateFunctionDeclaration(node, 
-            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, name, 
-            /*typeParameters*/ undefined, parameters, 
+            return ts.updateFunctionDeclaration(node,
+            /*decorators*/ undefined, ts.visitNodes(node.modifiers, visitor, ts.isModifier), node.asteriskToken, name,
+            /*typeParameters*/ undefined, parameters,
             /*type*/ undefined, body);
         }
         /**
@@ -58320,9 +58328,9 @@
             exitSubtree(ancestorFacts, 49152 /* PropagateNewTargetMask */, 0 /* None */);
             convertedLoopState = savedConvertedLoopState;
             return ts.setOriginalNode(ts.setTextRange(ts.createFunctionExpression(
-            /*modifiers*/ undefined, node.asteriskToken, name, 
-            /*typeParameters*/ undefined, parameters, 
-            /*type*/ undefined, body), location), 
+            /*modifiers*/ undefined, node.asteriskToken, name,
+            /*typeParameters*/ undefined, parameters,
+            /*type*/ undefined, body), location),
             /*original*/ node);
         }
         /**
@@ -58406,7 +58414,7 @@
         }
         function visitFunctionBodyDownLevel(node) {
             var updated = ts.visitFunctionBody(node.body, functionBodyVisitor, context);
-            return ts.updateBlock(updated, ts.setTextRange(ts.createNodeArray(prependCaptureNewTargetIfNeeded(updated.statements, node, /*copyOnWrite*/ true)), 
+            return ts.updateBlock(updated, ts.setTextRange(ts.createNodeArray(prependCaptureNewTargetIfNeeded(updated.statements, node, /*copyOnWrite*/ true)),
             /*location*/ updated.statements));
         }
         function visitBlock(node, isFunctionBody) {
@@ -58628,7 +58636,7 @@
             var ancestorFacts = enterSubtree(32 /* ExportedVariableStatement */, 0 /* None */);
             var updated;
             if (ts.isBindingPattern(node.name)) {
-                updated = ts.flattenDestructuringBinding(node, visitor, context, 0 /* All */, 
+                updated = ts.flattenDestructuringBinding(node, visitor, context, 0 /* All */,
                 /*value*/ undefined, (ancestorFacts & 32 /* ExportedVariableStatement */) !== 0);
             }
             else {
@@ -58709,7 +58717,7 @@
                     // to emit it separately.
                     statements.push(ts.setTextRange(ts.createVariableStatement(
                     /*modifiers*/ undefined, ts.setOriginalNode(ts.setTextRange(ts.createVariableDeclarationList([
-                        ts.createVariableDeclaration(firstOriginalDeclaration ? firstOriginalDeclaration.name : ts.createTempVariable(/*recordTempVariable*/ undefined), 
+                        ts.createVariableDeclaration(firstOriginalDeclaration ? firstOriginalDeclaration.name : ts.createTempVariable(/*recordTempVariable*/ undefined),
                         /*type*/ undefined, boundValue)
                     ]), ts.moveRangePos(node.initializer, -1)), node.initializer)), ts.moveRangeEnd(node.initializer, -1)));
                 }
@@ -58745,7 +58753,7 @@
             }
             // The old emitter does not emit source maps for the block.
             // We add the location to preserve comments.
-            return ts.setEmitFlags(ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation), 
+            return ts.setEmitFlags(ts.setTextRange(ts.createBlock(ts.setTextRange(ts.createNodeArray(statements), statementsLocation),
             /*multiLine*/ true), bodyLocation), 48 /* NoSourceMap */ | 384 /* NoTokenSourceMaps */);
         }
         function convertForOfStatementForArray(node, outermostLabeledStatement, convertedLoopBodyStatements) {
@@ -58783,10 +58791,10 @@
             /*initializer*/ ts.setEmitFlags(ts.setTextRange(ts.createVariableDeclarationList([
                 ts.setTextRange(ts.createVariableDeclaration(counter, /*type*/ undefined, ts.createLiteral(0)), ts.moveRangePos(node.expression, -1)),
                 ts.setTextRange(ts.createVariableDeclaration(rhsReference, /*type*/ undefined, expression), node.expression)
-            ]), node.expression), 2097152 /* NoHoisting */), 
-            /*condition*/ ts.setTextRange(ts.createLessThan(counter, ts.createPropertyAccess(rhsReference, "length")), node.expression), 
-            /*incrementor*/ ts.setTextRange(ts.createPostfixIncrement(counter), node.expression), 
-            /*statement*/ convertForOfStatementHead(node, ts.createElementAccess(rhsReference, counter), convertedLoopBodyStatements)), 
+            ]), node.expression), 2097152 /* NoHoisting */),
+            /*condition*/ ts.setTextRange(ts.createLessThan(counter, ts.createPropertyAccess(rhsReference, "length")), node.expression),
+            /*incrementor*/ ts.setTextRange(ts.createPostfixIncrement(counter), node.expression),
+            /*statement*/ convertForOfStatementHead(node, ts.createElementAccess(rhsReference, counter), convertedLoopBodyStatements)),
             /*location*/ node);
             // Disable trailing source maps for the OpenParenToken to align source map emit with the old emitter.
             ts.setEmitFlags(forStatement, 256 /* NoTokenTrailingSourceMaps */);
@@ -58808,10 +58816,10 @@
             /*initializer*/ ts.setEmitFlags(ts.setTextRange(ts.createVariableDeclarationList([
                 ts.setTextRange(ts.createVariableDeclaration(iterator, /*type*/ undefined, values), node.expression),
                 ts.createVariableDeclaration(result, /*type*/ undefined, next)
-            ]), node.expression), 2097152 /* NoHoisting */), 
-            /*condition*/ ts.createLogicalNot(ts.createPropertyAccess(result, "done")), 
-            /*incrementor*/ ts.createAssignment(result, next), 
-            /*statement*/ convertForOfStatementHead(node, ts.createPropertyAccess(result, "value"), convertedLoopBodyStatements)), 
+            ]), node.expression), 2097152 /* NoHoisting */),
+            /*condition*/ ts.createLogicalNot(ts.createPropertyAccess(result, "done")),
+            /*incrementor*/ ts.createAssignment(result, next),
+            /*statement*/ convertForOfStatementHead(node, ts.createPropertyAccess(result, "value"), convertedLoopBodyStatements)),
             /*location*/ node), 256 /* NoTokenTrailingSourceMaps */);
             return ts.createTry(ts.createBlock([
                 ts.restoreEnclosingLabel(forStatement, outermostLabeledStatement, convertedLoopState && resetLabel)
@@ -58823,8 +58831,8 @@
                 ts.createTry(
                 /*tryBlock*/ ts.createBlock([
                     ts.setEmitFlags(ts.createIf(ts.createLogicalAnd(ts.createLogicalAnd(result, ts.createLogicalNot(ts.createPropertyAccess(result, "done"))), ts.createAssignment(returnMethod, ts.createPropertyAccess(iterator, "return"))), ts.createStatement(ts.createFunctionCall(returnMethod, iterator, []))), 1 /* SingleLine */),
-                ]), 
-                /*catchClause*/ undefined, 
+                ]),
+                /*catchClause*/ undefined,
                 /*finallyBlock*/ ts.setEmitFlags(ts.createBlock([
                     ts.setEmitFlags(ts.createIf(errorRecord, ts.createThrow(ts.createPropertyAccess(errorRecord, "error"))), 1 /* SingleLine */)
                 ]), 1 /* SingleLine */))
@@ -58991,11 +58999,11 @@
             }
             var convertedLoopVariable = ts.createVariableStatement(
             /*modifiers*/ undefined, ts.setEmitFlags(ts.createVariableDeclarationList([
-                ts.createVariableDeclaration(functionName, 
+                ts.createVariableDeclaration(functionName,
                 /*type*/ undefined, ts.setEmitFlags(ts.createFunctionExpression(
-                /*modifiers*/ undefined, containsYield ? ts.createToken(39 /* AsteriskToken */) : undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, loopParameters, 
+                /*modifiers*/ undefined, containsYield ? ts.createToken(39 /* AsteriskToken */) : undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined, loopParameters,
                 /*type*/ undefined, loopBody), loopBodyFlags))
             ]), 2097152 /* NoHoisting */));
             var statements = [convertedLoopVariable];
@@ -59009,7 +59017,7 @@
                 }
                 else {
                     // this is top level converted loop and we need to create an alias for 'arguments' object
-                    (extraVariableDeclarations || (extraVariableDeclarations = [])).push(ts.createVariableDeclaration(currentState.argumentsName, 
+                    (extraVariableDeclarations || (extraVariableDeclarations = [])).push(ts.createVariableDeclaration(currentState.argumentsName,
                     /*type*/ undefined, ts.createIdentifier("arguments")));
                 }
             }
@@ -59024,7 +59032,7 @@
                     // NOTE:
                     // if converted loops were all nested in arrow function then we'll always emit '_this' so convertedLoopState.thisName will not be set.
                     // If it is set this means that all nested loops are not nested in arrow function and it is safe to capture 'this'.
-                    (extraVariableDeclarations || (extraVariableDeclarations = [])).push(ts.createVariableDeclaration(currentState.thisName, 
+                    (extraVariableDeclarations || (extraVariableDeclarations = [])).push(ts.createVariableDeclaration(currentState.thisName,
                     /*type*/ undefined, ts.createIdentifier("this")));
                 }
             }
@@ -59311,7 +59319,7 @@
             ts.Debug.assert(!ts.isComputedPropertyName(node.name));
             var functionExpression = transformFunctionLikeToExpression(node, /*location*/ ts.moveRangePos(node, -1), /*name*/ undefined, /*container*/ undefined);
             ts.setEmitFlags(functionExpression, 512 /* NoLeadingComments */ | ts.getEmitFlags(functionExpression));
-            return ts.setTextRange(ts.createPropertyAssignment(node.name, functionExpression), 
+            return ts.setTextRange(ts.createPropertyAssignment(node.name, functionExpression),
             /*location*/ node);
         }
         /**
@@ -59348,7 +59356,7 @@
          * @param node A ShorthandPropertyAssignment node.
          */
         function visitShorthandPropertyAssignment(node) {
-            return ts.setTextRange(ts.createPropertyAssignment(node.name, ts.getSynthesizedClone(node.name)), 
+            return ts.setTextRange(ts.createPropertyAssignment(node.name, ts.getSynthesizedClone(node.name)),
             /*location*/ node);
         }
         function visitComputedPropertyName(node) {
@@ -59390,7 +59398,7 @@
             if (node.transformFlags & 64 /* ES2015 */) {
                 return visitCallExpressionWithPotentialCapturedThisAssignment(node, /*assignToCapturedThis*/ true);
             }
-            return ts.updateCall(node, ts.visitNode(node.expression, callExpressionVisitor, ts.isExpression), 
+            return ts.updateCall(node, ts.visitNode(node.expression, callExpressionVisitor, ts.isExpression),
             /*typeArguments*/ undefined, ts.visitNodes(node.arguments, visitor, ts.isExpression));
         }
         function visitTypeScriptClassWrapper(node) {
@@ -59492,12 +59500,12 @@
             ts.addRange(statements, classStatements, /*start*/ 1);
             // Recreate any outer parentheses or partially-emitted expressions to preserve source map
             // and comment locations.
-            return ts.recreateOuterExpressions(node.expression, ts.recreateOuterExpressions(variable.initializer, ts.recreateOuterExpressions(aliasAssignment && aliasAssignment.right, ts.updateCall(call, ts.recreateOuterExpressions(call.expression, ts.updateFunctionExpression(func, 
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, func.parameters, 
-            /*type*/ undefined, ts.updateBlock(func.body, statements))), 
+            return ts.recreateOuterExpressions(node.expression, ts.recreateOuterExpressions(variable.initializer, ts.recreateOuterExpressions(aliasAssignment && aliasAssignment.right, ts.updateCall(call, ts.recreateOuterExpressions(call.expression, ts.updateFunctionExpression(func,
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, func.parameters,
+            /*type*/ undefined, ts.updateBlock(func.body, statements))),
             /*typeArguments*/ undefined, call.arguments))));
         }
         function visitImmediateSuperCallInBody(node) {
@@ -59537,7 +59545,7 @@
                 //      _super.call(this, a)
                 //      _super.m.call(this, a)
                 //      _super.prototype.m.call(this, a)
-                resultingCall = ts.createFunctionCall(ts.visitNode(target, callExpressionVisitor, ts.isExpression), ts.visitNode(thisArg, visitor, ts.isExpression), ts.visitNodes(node.arguments, visitor, ts.isExpression), 
+                resultingCall = ts.createFunctionCall(ts.visitNode(target, callExpressionVisitor, ts.isExpression), ts.visitNode(thisArg, visitor, ts.isExpression), ts.visitNodes(node.arguments, visitor, ts.isExpression),
                 /*location*/ node);
             }
             if (node.expression.kind === 97 /* SuperKeyword */) {
@@ -59564,7 +59572,7 @@
                 // [output]
                 //      new ((_a = C).bind.apply(_a, [void 0].concat(a)))()
                 var _a = ts.createCallBinding(ts.createPropertyAccess(node.expression, "bind"), hoistVariableDeclaration), target = _a.target, thisArg = _a.thisArg;
-                return ts.createNew(ts.createFunctionApply(ts.visitNode(target, visitor, ts.isExpression), thisArg, transformAndSpreadElements(ts.createNodeArray([ts.createVoidZero()].concat(node.arguments)), /*needsUniqueCopy*/ false, /*multiLine*/ false, /*hasTrailingComma*/ false)), 
+                return ts.createNew(ts.createFunctionApply(ts.visitNode(target, visitor, ts.isExpression), thisArg, transformAndSpreadElements(ts.createNodeArray([ts.createVoidZero()].concat(node.arguments)), /*needsUniqueCopy*/ false, /*multiLine*/ false, /*hasTrailingComma*/ false)),
                 /*typeArguments*/ undefined, []);
             }
             return ts.visitEachChild(node, visitor, context);
@@ -60021,7 +60029,7 @@
     ts.transformES2015 = transformES2015;
     function createExtendsHelper(context, name) {
         context.requestEmitHelper(extendsHelper);
-        return ts.createCall(ts.getHelperName("__extends"), 
+        return ts.createCall(ts.getHelperName("__extends"),
         /*typeArguments*/ undefined, [
             name,
             ts.createIdentifier("_super")
@@ -60029,7 +60037,7 @@
     }
     function createTemplateObjectHelper(context, cooked, raw) {
         context.requestEmitHelper(templateObjectHelper);
-        return ts.createCall(ts.getHelperName("__makeTemplateObject"), 
+        return ts.createCall(ts.getHelperName("__makeTemplateObject"),
         /*typeArguments*/ undefined, [
             cooked,
             raw
@@ -60534,10 +60542,10 @@
             // Currently, we only support generators that were originally async functions.
             if (node.asteriskToken) {
                 node = ts.setOriginalNode(ts.setTextRange(ts.createFunctionDeclaration(
-                /*decorators*/ undefined, node.modifiers, 
-                /*asteriskToken*/ undefined, node.name, 
-                /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
-                /*type*/ undefined, transformGeneratorFunctionBody(node.body)), 
+                /*decorators*/ undefined, node.modifiers,
+                /*asteriskToken*/ undefined, node.name,
+                /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
+                /*type*/ undefined, transformGeneratorFunctionBody(node.body)),
                 /*location*/ node), node);
             }
             else {
@@ -60572,10 +60580,10 @@
             // Currently, we only support generators that were originally async functions.
             if (node.asteriskToken) {
                 node = ts.setOriginalNode(ts.setTextRange(ts.createFunctionExpression(
-                /*modifiers*/ undefined, 
-                /*asteriskToken*/ undefined, node.name, 
-                /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context), 
-                /*type*/ undefined, transformGeneratorFunctionBody(node.body)), 
+                /*modifiers*/ undefined,
+                /*asteriskToken*/ undefined, node.name,
+                /*typeParameters*/ undefined, ts.visitParameterList(node.parameters, visitor, context),
+                /*type*/ undefined, transformGeneratorFunctionBody(node.body)),
                 /*location*/ node), node);
             }
             else {
@@ -61081,7 +61089,7 @@
                 //  .mark resumeLabel
                 //      _b.apply(_a, _c.concat([%sent%, 2]));
                 var _a = ts.createCallBinding(node.expression, hoistVariableDeclaration, languageVersion, /*cacheIdentifiers*/ true), target = _a.target, thisArg = _a.thisArg;
-                return ts.setOriginalNode(ts.createFunctionApply(cacheExpression(ts.visitNode(target, visitor, ts.isLeftHandSideExpression)), thisArg, visitElements(node.arguments), 
+                return ts.setOriginalNode(ts.createFunctionApply(cacheExpression(ts.visitNode(target, visitor, ts.isLeftHandSideExpression)), thisArg, visitElements(node.arguments),
                 /*location*/ node), node);
             }
             return ts.visitEachChild(node, visitor, context);
@@ -61099,8 +61107,8 @@
                 //  .mark resumeLabel
                 //      new (_b.apply(_a, _c.concat([%sent%, 2])));
                 var _a = ts.createCallBinding(ts.createPropertyAccess(node.expression, "bind"), hoistVariableDeclaration), target = _a.target, thisArg = _a.thisArg;
-                return ts.setOriginalNode(ts.setTextRange(ts.createNew(ts.createFunctionApply(cacheExpression(ts.visitNode(target, visitor, ts.isExpression)), thisArg, visitElements(node.arguments, 
-                /*leadingElement*/ ts.createVoidZero())), 
+                return ts.setOriginalNode(ts.setTextRange(ts.createNew(ts.createFunctionApply(cacheExpression(ts.visitNode(target, visitor, ts.isExpression)), thisArg, visitElements(node.arguments,
+                /*leadingElement*/ ts.createVoidZero())),
                 /*typeArguments*/ undefined, []), node), node);
             }
             return ts.visitEachChild(node, visitor, context);
@@ -61417,7 +61425,7 @@
                 var initializer = node.initializer;
                 hoistVariableDeclaration(keysIndex);
                 emitAssignment(keysArray, ts.createArrayLiteral());
-                emitStatement(ts.createForIn(key, ts.visitNode(node.expression, visitor, ts.isExpression), ts.createStatement(ts.createCall(ts.createPropertyAccess(keysArray, "push"), 
+                emitStatement(ts.createForIn(key, ts.visitNode(node.expression, visitor, ts.isExpression), ts.createStatement(ts.createCall(ts.createPropertyAccess(keysArray, "push"),
                 /*typeArguments*/ undefined, [key]))));
                 emitAssignment(keysIndex, ts.createLiteral(0));
                 var conditionLabel = defineLabel();
@@ -61519,11 +61527,11 @@
             return ts.visitEachChild(node, visitor, context);
         }
         function transformAndEmitReturnStatement(node) {
-            emitReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 
+            emitReturn(ts.visitNode(node.expression, visitor, ts.isExpression),
             /*location*/ node);
         }
         function visitReturnStatement(node) {
-            return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 
+            return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression),
             /*location*/ node);
         }
         function transformAndEmitWithStatement(node) {
@@ -61681,7 +61689,7 @@
             return node;
         }
         function transformAndEmitThrowStatement(node) {
-            emitThrow(ts.visitNode(node.expression, visitor, ts.isExpression), 
+            emitThrow(ts.visitNode(node.expression, visitor, ts.isExpression),
             /*location*/ node);
         }
         function transformAndEmitTryStatement(node) {
@@ -62217,7 +62225,7 @@
          * Creates an expression that can be used to resume from a Yield operation.
          */
         function createGeneratorResume(location) {
-            return ts.setTextRange(ts.createCall(ts.createPropertyAccess(state, "sent"), 
+            return ts.setTextRange(ts.createCall(ts.createPropertyAccess(state, "sent"),
             /*typeArguments*/ undefined, []), location);
         }
         /**
@@ -62359,11 +62367,11 @@
             withBlockStack = undefined;
             var buildResult = buildStatements();
             return createGeneratorHelper(context, ts.setEmitFlags(ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, state)], 
-            /*type*/ undefined, ts.createBlock(buildResult, 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, state)],
+            /*type*/ undefined, ts.createBlock(buildResult,
             /*multiLine*/ buildResult.length > 0)), 524288 /* ReuseTempVariableScope */));
         }
         /**
@@ -62465,7 +62473,7 @@
                     // indicate entry into a protected region by pushing the label numbers
                     // for each block in the protected region.
                     var startLabel = currentExceptionBlock.startLabel, catchLabel = currentExceptionBlock.catchLabel, finallyLabel = currentExceptionBlock.finallyLabel, endLabel = currentExceptionBlock.endLabel;
-                    statements.unshift(ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createPropertyAccess(state, "trys"), "push"), 
+                    statements.unshift(ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createPropertyAccess(state, "trys"), "push"),
                     /*typeArguments*/ undefined, [
                         ts.createArrayLiteral([
                             createLabel(startLabel),
@@ -62739,7 +62747,7 @@
     ts.transformGenerators = transformGenerators;
     function createGeneratorHelper(context, body) {
         context.requestEmitHelper(generatorHelper);
-        return ts.createCall(ts.getHelperName("__generator"), 
+        return ts.createCall(ts.getHelperName("__generator"),
         /*typeArguments*/ undefined, [ts.createThis(), body]);
     }
     // The __generator helper is used by down-level transformations to emulate the runtime
@@ -62930,7 +62938,7 @@
             //
             //     define(moduleName?, ["module1", "module2"], function ...
             return ts.updateSourceFileNode(node, ts.setTextRange(ts.createNodeArray([
-                ts.createStatement(ts.createCall(define, 
+                ts.createStatement(ts.createCall(define,
                 /*typeArguments*/ undefined, (moduleName ? [moduleName] : []).concat([
                     // Add the dependency array argument:
                     //
@@ -62943,16 +62951,16 @@
                     //
                     //     function (require, exports, module1, module2) ...
                     ts.createFunctionExpression(
-                    /*modifiers*/ undefined, 
-                    /*asteriskToken*/ undefined, 
-                    /*name*/ undefined, 
+                    /*modifiers*/ undefined,
+                    /*asteriskToken*/ undefined,
+                    /*name*/ undefined,
                     /*typeParameters*/ undefined, [
                         ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "require"),
                         ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "exports")
-                    ].concat(importAliasNames), 
+                    ].concat(importAliasNames),
                     /*type*/ undefined, transformAsynchronousModuleBody(node))
                 ])))
-            ]), 
+            ]),
             /*location*/ node.statements));
         }
         /**
@@ -62964,16 +62972,16 @@
             var _a = collectAsynchronousDependencies(node, /*includeNonAmdDependencies*/ false), aliasedModuleNames = _a.aliasedModuleNames, unaliasedModuleNames = _a.unaliasedModuleNames, importAliasNames = _a.importAliasNames;
             var moduleName = ts.tryGetModuleNameFromFile(node, host, compilerOptions);
             var umdHeader = ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
-            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "factory")], 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
+            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "factory")],
             /*type*/ undefined, ts.setTextRange(ts.createBlock([
                 ts.createIf(ts.createLogicalAnd(ts.createTypeCheck(ts.createIdentifier("module"), "object"), ts.createTypeCheck(ts.createPropertyAccess(ts.createIdentifier("module"), "exports"), "object")), ts.createBlock([
                     ts.createVariableStatement(
                     /*modifiers*/ undefined, [
-                        ts.createVariableDeclaration("v", 
-                        /*type*/ undefined, ts.createCall(ts.createIdentifier("factory"), 
+                        ts.createVariableDeclaration("v",
+                        /*type*/ undefined, ts.createCall(ts.createIdentifier("factory"),
                         /*typeArguments*/ undefined, [
                             ts.createIdentifier("require"),
                             ts.createIdentifier("exports")
@@ -62981,7 +62989,7 @@
                     ]),
                     ts.setEmitFlags(ts.createIf(ts.createStrictInequality(ts.createIdentifier("v"), ts.createIdentifier("undefined")), ts.createStatement(ts.createAssignment(ts.createPropertyAccess(ts.createIdentifier("module"), "exports"), ts.createIdentifier("v")))), 1 /* SingleLine */)
                 ]), ts.createIf(ts.createLogicalAnd(ts.createTypeCheck(ts.createIdentifier("define"), "function"), ts.createPropertyAccess(ts.createIdentifier("define"), "amd")), ts.createBlock([
-                    ts.createStatement(ts.createCall(ts.createIdentifier("define"), 
+                    ts.createStatement(ts.createCall(ts.createIdentifier("define"),
                     /*typeArguments*/ undefined, (moduleName ? [moduleName] : []).concat([
                         ts.createArrayLiteral([
                             ts.createLiteral("require"),
@@ -62990,8 +62998,8 @@
                         ts.createIdentifier("factory")
                     ])))
                 ])))
-            ], 
-            /*multiLine*/ true), 
+            ],
+            /*multiLine*/ true),
             /*location*/ undefined));
             // Create an updated SourceFile:
             //
@@ -63005,22 +63013,22 @@
             //      }
             //  })(function ...)
             return ts.updateSourceFileNode(node, ts.setTextRange(ts.createNodeArray([
-                ts.createStatement(ts.createCall(umdHeader, 
+                ts.createStatement(ts.createCall(umdHeader,
                 /*typeArguments*/ undefined, [
                     // Add the module body function argument:
                     //
                     //     function (require, exports) ...
                     ts.createFunctionExpression(
-                    /*modifiers*/ undefined, 
-                    /*asteriskToken*/ undefined, 
-                    /*name*/ undefined, 
+                    /*modifiers*/ undefined,
+                    /*asteriskToken*/ undefined,
+                    /*name*/ undefined,
                     /*typeParameters*/ undefined, [
                         ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "require"),
                         ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "exports")
-                    ].concat(importAliasNames), 
+                    ].concat(importAliasNames),
                     /*type*/ undefined, transformAsynchronousModuleBody(node))
                 ]))
-            ]), 
+            ]),
             /*location*/ node.statements));
         }
         /**
@@ -63207,15 +63215,15 @@
             if (ts.isSimpleCopiableExpression(arg)) {
                 var argClone = ts.isGeneratedIdentifier(arg) ? arg : ts.isStringLiteral(arg) ? ts.createLiteral(arg) : ts.setEmitFlags(ts.setTextRange(ts.getSynthesizedClone(arg), arg), 1536 /* NoComments */);
                 return ts.createConditional(
-                /*condition*/ ts.createIdentifier("__syncRequire"), 
-                /*whenTrue*/ createImportCallExpressionCommonJS(arg, containsLexicalThis), 
+                /*condition*/ ts.createIdentifier("__syncRequire"),
+                /*whenTrue*/ createImportCallExpressionCommonJS(arg, containsLexicalThis),
                 /*whenFalse*/ createImportCallExpressionAMD(argClone, containsLexicalThis));
             }
             else {
                 var temp = ts.createTempVariable(hoistVariableDeclaration);
                 return ts.createComma(ts.createAssignment(temp, arg), ts.createConditional(
-                /*condition*/ ts.createIdentifier("__syncRequire"), 
-                /*whenTrue*/ createImportCallExpressionCommonJS(temp, containsLexicalThis), 
+                /*condition*/ ts.createIdentifier("__syncRequire"),
+                /*whenTrue*/ createImportCallExpressionCommonJS(temp, containsLexicalThis),
                 /*whenFalse*/ createImportCallExpressionAMD(temp, containsLexicalThis)));
             }
         }
@@ -63233,23 +63241,23 @@
                 ts.createParameter(/*decorator*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, /*name*/ reject)
             ];
             var body = ts.createBlock([
-                ts.createStatement(ts.createCall(ts.createIdentifier("require"), 
+                ts.createStatement(ts.createCall(ts.createIdentifier("require"),
                 /*typeArguments*/ undefined, [ts.createArrayLiteral([arg || ts.createOmittedExpression()]), resolve, reject]))
             ]);
             var func;
             if (languageVersion >= 2 /* ES2015 */) {
                 func = ts.createArrowFunction(
-                /*modifiers*/ undefined, 
-                /*typeParameters*/ undefined, parameters, 
-                /*type*/ undefined, 
+                /*modifiers*/ undefined,
+                /*typeParameters*/ undefined, parameters,
+                /*type*/ undefined,
                 /*equalsGreaterThanToken*/ undefined, body);
             }
             else {
                 func = ts.createFunctionExpression(
-                /*modifiers*/ undefined, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, parameters, 
+                /*modifiers*/ undefined,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined, parameters,
                 /*type*/ undefined, body);
                 // if there is a lexical 'this' in the import call arguments, ensure we indicate
                 // that this new function expression indicates it captures 'this' so that the
@@ -63271,19 +63279,19 @@
             var func;
             if (languageVersion >= 2 /* ES2015 */) {
                 func = ts.createArrowFunction(
-                /*modifiers*/ undefined, 
-                /*typeParameters*/ undefined, 
-                /*parameters*/ [], 
-                /*type*/ undefined, 
+                /*modifiers*/ undefined,
+                /*typeParameters*/ undefined,
+                /*parameters*/ [],
+                /*type*/ undefined,
                 /*equalsGreaterThanToken*/ undefined, requireCall);
             }
             else {
                 func = ts.createFunctionExpression(
-                /*modifiers*/ undefined, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, 
-                /*parameters*/ [], 
+                /*modifiers*/ undefined,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined,
+                /*parameters*/ [],
                 /*type*/ undefined, ts.createBlock([ts.createReturn(requireCall)]));
                 // if there is a lexical 'this' in the import call arguments, ensure we indicate
                 // that this new function expression indicates it captures 'this' so that the
@@ -63311,7 +63319,7 @@
                     var variables = [];
                     if (namespaceDeclaration && !ts.isDefaultImport(node)) {
                         // import * as n from "mod";
-                        variables.push(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name), 
+                        variables.push(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name),
                         /*type*/ undefined, createRequireCall(node)));
                     }
                     else {
@@ -63319,15 +63327,15 @@
                         // import { x, y } from "mod";
                         // import d, { x, y } from "mod";
                         // import d, * as n from "mod";
-                        variables.push(ts.createVariableDeclaration(ts.getGeneratedNameForNode(node), 
+                        variables.push(ts.createVariableDeclaration(ts.getGeneratedNameForNode(node),
                         /*type*/ undefined, createRequireCall(node)));
                         if (namespaceDeclaration && ts.isDefaultImport(node)) {
-                            variables.push(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name), 
+                            variables.push(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name),
                             /*type*/ undefined, ts.getGeneratedNameForNode(node)));
                         }
                     }
                     statements = ts.append(statements, ts.setTextRange(ts.createVariableStatement(
-                    /*modifiers*/ undefined, ts.createVariableDeclarationList(variables, languageVersion >= 2 /* ES2015 */ ? 2 /* Const */ : 0 /* None */)), 
+                    /*modifiers*/ undefined, ts.createVariableDeclarationList(variables, languageVersion >= 2 /* ES2015 */ ? 2 /* Const */ : 0 /* None */)),
                     /*location*/ node));
                 }
             }
@@ -63335,8 +63343,8 @@
                 // import d, * as n from "mod";
                 statements = ts.append(statements, ts.createVariableStatement(
                 /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                    ts.setTextRange(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name), 
-                    /*type*/ undefined, ts.getGeneratedNameForNode(node)), 
+                    ts.setTextRange(ts.createVariableDeclaration(ts.getSynthesizedClone(namespaceDeclaration.name),
+                    /*type*/ undefined, ts.getGeneratedNameForNode(node)),
                     /*location*/ node)
                 ], languageVersion >= 2 /* ES2015 */ ? 2 /* Const */ : 0 /* None */)));
             }
@@ -63378,9 +63386,9 @@
                 else {
                     statements = ts.append(statements, ts.setTextRange(ts.createVariableStatement(
                     /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                        ts.createVariableDeclaration(ts.getSynthesizedClone(node.name), 
+                        ts.createVariableDeclaration(ts.getSynthesizedClone(node.name),
                         /*type*/ undefined, createRequireCall(node))
-                    ], 
+                    ],
                     /*flags*/ languageVersion >= 2 /* ES2015 */ ? 2 /* Const */ : 0 /* None */)), node));
                 }
             }
@@ -63417,9 +63425,9 @@
                 if (moduleKind !== ts.ModuleKind.AMD) {
                     statements.push(ts.setTextRange(ts.createVariableStatement(
                     /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                        ts.createVariableDeclaration(generatedName, 
+                        ts.createVariableDeclaration(generatedName,
                         /*type*/ undefined, createRequireCall(node))
-                    ])), 
+                    ])),
                     /*location*/ node));
                 }
                 for (var _i = 0, _a = node.exportClause.elements; _i < _a.length; _i++) {
@@ -63464,10 +63472,10 @@
             var statements;
             if (ts.hasModifier(node, 1 /* Export */)) {
                 statements = ts.append(statements, ts.setOriginalNode(ts.setTextRange(ts.createFunctionDeclaration(
-                /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true), 
-                /*typeParameters*/ undefined, ts.visitNodes(node.parameters, importCallExpressionVisitor), 
-                /*type*/ undefined, ts.visitEachChild(node.body, importCallExpressionVisitor, context)), 
-                /*location*/ node), 
+                /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true),
+                /*typeParameters*/ undefined, ts.visitNodes(node.parameters, importCallExpressionVisitor),
+                /*type*/ undefined, ts.visitEachChild(node.body, importCallExpressionVisitor, context)),
+                /*location*/ node),
                 /*original*/ node));
             }
             else {
@@ -63492,7 +63500,7 @@
             var statements;
             if (ts.hasModifier(node, 1 /* Export */)) {
                 statements = ts.append(statements, ts.setOriginalNode(ts.setTextRange(ts.createClassDeclaration(
-                /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true), 
+                /*decorators*/ undefined, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true),
                 /*typeParameters*/ undefined, ts.visitNodes(node.heritageClauses, importCallExpressionVisitor), ts.visitNodes(node.members, importCallExpressionVisitor)), node), node));
             }
             else {
@@ -63560,12 +63568,12 @@
          */
         function transformInitializedVariable(node) {
             if (ts.isBindingPattern(node.name)) {
-                return ts.flattenDestructuringAssignment(ts.visitNode(node, importCallExpressionVisitor), 
-                /*visitor*/ undefined, context, 0 /* All */, 
+                return ts.flattenDestructuringAssignment(ts.visitNode(node, importCallExpressionVisitor),
+                /*visitor*/ undefined, context, 0 /* All */,
                 /*needsValue*/ false, createExportExpression);
             }
             else {
-                return ts.createAssignment(ts.setTextRange(ts.createPropertyAccess(ts.createIdentifier("exports"), node.name), 
+                return ts.createAssignment(ts.setTextRange(ts.createPropertyAccess(ts.createIdentifier("exports"), node.name),
                 /*location*/ node.name), ts.visitNode(node.initializer, importCallExpressionVisitor));
             }
         }
@@ -63774,7 +63782,7 @@
                 statement = ts.createStatement(createExportExpression(ts.createIdentifier("__esModule"), ts.createLiteral(/*value*/ true)));
             }
             else {
-                statement = ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"), 
+                statement = ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("Object"), "defineProperty"),
                 /*typeArguments*/ undefined, [
                     ts.createIdentifier("exports"),
                     ts.createLiteral("__esModule"),
@@ -63929,18 +63937,18 @@
             if (!ts.isGeneratedIdentifier(node) && !ts.isLocalName(node)) {
                 var exportContainer = resolver.getReferencedExportContainer(node, ts.isExportName(node));
                 if (exportContainer && exportContainer.kind === 268 /* SourceFile */) {
-                    return ts.setTextRange(ts.createPropertyAccess(ts.createIdentifier("exports"), ts.getSynthesizedClone(node)), 
+                    return ts.setTextRange(ts.createPropertyAccess(ts.createIdentifier("exports"), ts.getSynthesizedClone(node)),
                     /*location*/ node);
                 }
                 var importDeclaration = resolver.getReferencedImportDeclaration(node);
                 if (importDeclaration) {
                     if (ts.isImportClause(importDeclaration)) {
-                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent), ts.createIdentifier("default")), 
+                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent), ts.createIdentifier("default")),
                         /*location*/ node);
                     }
                     else if (ts.isImportSpecifier(importDeclaration)) {
                         var name = importDeclaration.propertyName || importDeclaration.name;
-                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent.parent.parent), ts.getSynthesizedClone(name)), 
+                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent.parent.parent), ts.getSynthesizedClone(name)),
                         /*location*/ node);
                     }
                 }
@@ -64004,7 +64012,7 @@
                 var exportedNames = getExports(node.operand);
                 if (exportedNames) {
                     var expression = node.kind === 193 /* PostfixUnaryExpression */
-                        ? ts.setTextRange(ts.createBinary(node.operand, ts.createToken(node.operator === 43 /* PlusPlusToken */ ? 59 /* PlusEqualsToken */ : 60 /* MinusEqualsToken */), ts.createLiteral(1)), 
+                        ? ts.setTextRange(ts.createBinary(node.operand, ts.createToken(node.operator === 43 /* PlusPlusToken */ ? 59 /* PlusEqualsToken */ : 60 /* MinusEqualsToken */), ts.createLiteral(1)),
                         /*location*/ node)
                         : node;
                     for (var _i = 0, exportedNames_2 = exportedNames; _i < exportedNames_2.length; _i++) {
@@ -64121,13 +64129,13 @@
             var dependencyGroups = collectDependencyGroups(moduleInfo.externalImports);
             var moduleBodyBlock = createSystemModuleBody(node, dependencyGroups);
             var moduleBodyFunction = ts.createFunctionExpression(
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, 
-            /*name*/ undefined, 
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined,
+            /*name*/ undefined,
             /*typeParameters*/ undefined, [
                 ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, exportFunction),
                 ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, contextObject)
-            ], 
+            ],
             /*type*/ undefined, moduleBodyBlock);
             // Write the call to `System.register`
             // Clear the emit-helpers flag for later passes since we'll have already used it in the module body
@@ -64135,7 +64143,7 @@
             var moduleName = ts.tryGetModuleNameFromFile(node, host, compilerOptions);
             var dependencies = ts.createArrayLiteral(ts.map(dependencyGroups, function (dependencyGroup) { return dependencyGroup.name; }));
             var updated = ts.setEmitFlags(ts.updateSourceFileNode(node, ts.setTextRange(ts.createNodeArray([
-                ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("System"), "register"), 
+                ts.createStatement(ts.createCall(ts.createPropertyAccess(ts.createIdentifier("System"), "register"),
                 /*typeArguments*/ undefined, moduleName
                     ? [moduleName, dependencies, moduleBodyFunction]
                     : [dependencies, moduleBodyFunction]))
@@ -64242,7 +64250,7 @@
             // var __moduleName = context_1 && context_1.id;
             statements.push(ts.createVariableStatement(
             /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                ts.createVariableDeclaration("__moduleName", 
+                ts.createVariableDeclaration("__moduleName",
                 /*type*/ undefined, ts.createLogicalAnd(contextObject, ts.createPropertyAccess(contextObject, "id")))
             ])));
             // Visit the synthetic external helpers import declaration if present
@@ -64263,11 +64271,11 @@
             var moduleObject = ts.createObjectLiteral([
                 ts.createPropertyAssignment("setters", createSettersArray(exportStarFunction, dependencyGroups)),
                 ts.createPropertyAssignment("execute", ts.createFunctionExpression(
-                /*modifiers*/ undefined, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, 
-                /*parameters*/ [], 
+                /*modifiers*/ undefined,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined,
+                /*parameters*/ [],
                 /*type*/ undefined, ts.createBlock(executeStatements, /*multiLine*/ true)))
             ]);
             moduleObject.multiLine = true;
@@ -64336,7 +64344,7 @@
             var exportedNamesStorageRef = ts.createUniqueName("exportedNames");
             statements.push(ts.createVariableStatement(
             /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                ts.createVariableDeclaration(exportedNamesStorageRef, 
+                ts.createVariableDeclaration(exportedNamesStorageRef,
                 /*type*/ undefined, ts.createObjectLiteral(exportedNames, /*multiline*/ true))
             ])));
             var exportStarFunction = createExportStarFunction(exportedNamesStorageRef);
@@ -64357,18 +64365,18 @@
             var exports = ts.createIdentifier("exports");
             var condition = ts.createStrictInequality(n, ts.createLiteral("default"));
             if (localNames) {
-                condition = ts.createLogicalAnd(condition, ts.createLogicalNot(ts.createCall(ts.createPropertyAccess(localNames, "hasOwnProperty"), 
+                condition = ts.createLogicalAnd(condition, ts.createLogicalNot(ts.createCall(ts.createPropertyAccess(localNames, "hasOwnProperty"),
                 /*typeArguments*/ undefined, [n])));
             }
             return ts.createFunctionDeclaration(
-            /*decorators*/ undefined, 
-            /*modifiers*/ undefined, 
-            /*asteriskToken*/ undefined, exportStarFunction, 
-            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, m)], 
+            /*decorators*/ undefined,
+            /*modifiers*/ undefined,
+            /*asteriskToken*/ undefined, exportStarFunction,
+            /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, m)],
             /*type*/ undefined, ts.createBlock([
                 ts.createVariableStatement(
                 /*modifiers*/ undefined, ts.createVariableDeclarationList([
-                    ts.createVariableDeclaration(exports, 
+                    ts.createVariableDeclaration(exports,
                     /*type*/ undefined, ts.createObjectLiteral([]))
                 ])),
                 ts.createForIn(ts.createVariableDeclarationList([
@@ -64376,7 +64384,7 @@
                 ]), m, ts.createBlock([
                     ts.setEmitFlags(ts.createIf(condition, ts.createStatement(ts.createAssignment(ts.createElementAccess(exports, n), ts.createElementAccess(m, n)))), 1 /* SingleLine */)
                 ])),
-                ts.createStatement(ts.createCall(exportFunction, 
+                ts.createStatement(ts.createCall(exportFunction,
                 /*typeArguments*/ undefined, [exports]))
             ], /*multiline*/ true));
         }
@@ -64426,7 +64434,7 @@
                                     var e = _d[_c];
                                     properties.push(ts.createPropertyAssignment(ts.createLiteral(ts.idText(e.name)), ts.createElementAccess(parameterName, ts.createLiteral(ts.idText(e.propertyName || e.name)))));
                                 }
-                                statements.push(ts.createStatement(ts.createCall(exportFunction, 
+                                statements.push(ts.createStatement(ts.createCall(exportFunction,
                                 /*typeArguments*/ undefined, [ts.createObjectLiteral(properties, /*multiline*/ true)])));
                             }
                             else {
@@ -64435,17 +64443,17 @@
                                 // emit as:
                                 //
                                 //  exportStar(foo_1_1);
-                                statements.push(ts.createStatement(ts.createCall(exportStarFunction, 
+                                statements.push(ts.createStatement(ts.createCall(exportStarFunction,
                                 /*typeArguments*/ undefined, [parameterName])));
                             }
                             break;
                     }
                 }
                 setters.push(ts.createFunctionExpression(
-                /*modifiers*/ undefined, 
-                /*asteriskToken*/ undefined, 
-                /*name*/ undefined, 
-                /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)], 
+                /*modifiers*/ undefined,
+                /*asteriskToken*/ undefined,
+                /*name*/ undefined,
+                /*typeParameters*/ undefined, [ts.createParameter(/*decorators*/ undefined, /*modifiers*/ undefined, /*dotDotDotToken*/ undefined, parameterName)],
                 /*type*/ undefined, ts.createBlock(statements, /*multiLine*/ true)));
             }
             return ts.createArrayLiteral(setters, /*multiLine*/ true);
@@ -64541,8 +64549,8 @@
          */
         function visitFunctionDeclaration(node) {
             if (ts.hasModifier(node, 1 /* Export */)) {
-                hoistedStatements = ts.append(hoistedStatements, ts.updateFunctionDeclaration(node, node.decorators, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true), 
-                /*typeParameters*/ undefined, ts.visitNodes(node.parameters, destructuringAndImportCallVisitor, ts.isParameterDeclaration), 
+                hoistedStatements = ts.append(hoistedStatements, ts.updateFunctionDeclaration(node, node.decorators, ts.visitNodes(node.modifiers, modifierVisitor, ts.isModifier), node.asteriskToken, ts.getDeclarationName(node, /*allowComments*/ true, /*allowSourceMaps*/ true),
+                /*typeParameters*/ undefined, ts.visitNodes(node.parameters, destructuringAndImportCallVisitor, ts.isParameterDeclaration),
                 /*type*/ undefined, ts.visitNode(node.body, destructuringAndImportCallVisitor, ts.isBlock)));
             }
             else {
@@ -64570,7 +64578,7 @@
             hoistVariableDeclaration(name);
             // Rewrite the class declaration into an assignment of a class expression.
             statements = ts.append(statements, ts.setTextRange(ts.createStatement(ts.createAssignment(name, ts.setTextRange(ts.createClassExpression(
-            /*modifiers*/ undefined, node.name, 
+            /*modifiers*/ undefined, node.name,
             /*typeParameters*/ undefined, ts.visitNodes(node.heritageClauses, destructuringAndImportCallVisitor, ts.isHeritageClause), ts.visitNodes(node.members, destructuringAndImportCallVisitor, ts.isClassElement)), node))), node));
             if (hasAssociatedEndOfDeclarationMarker(node)) {
                 // Defer exports until we encounter an EndOfDeclarationMarker node
@@ -64656,7 +64664,7 @@
         function transformInitializedVariable(node, isExportedDeclaration) {
             var createAssignment = isExportedDeclaration ? createExportedVariableAssignment : createNonExportedVariableAssignment;
             return ts.isBindingPattern(node.name)
-                ? ts.flattenDestructuringAssignment(node, destructuringAndImportCallVisitor, context, 0 /* All */, 
+                ? ts.flattenDestructuringAssignment(node, destructuringAndImportCallVisitor, context, 0 /* All */,
                 /*needsValue*/ false, createAssignment)
                 : node.initializer ? createAssignment(node.name, ts.visitNode(node.initializer, destructuringAndImportCallVisitor, ts.isExpression)) : node.name;
         }
@@ -65193,7 +65201,7 @@
             //         }
             //     };
             // });
-            return ts.createCall(ts.createPropertyAccess(contextObject, ts.createIdentifier("import")), 
+            return ts.createCall(ts.createPropertyAccess(contextObject, ts.createIdentifier("import")),
             /*typeArguments*/ undefined, ts.some(node.arguments) ? [ts.visitNode(node.arguments[0], destructuringAndImportCallVisitor)] : []);
         }
         /**
@@ -65203,7 +65211,7 @@
          */
         function visitDestructuringAssignment(node) {
             if (hasExportedReferenceInDestructuringTarget(node.left)) {
-                return ts.flattenDestructuringAssignment(node, destructuringAndImportCallVisitor, context, 0 /* All */, 
+                return ts.flattenDestructuringAssignment(node, destructuringAndImportCallVisitor, context, 0 /* All */,
                 /*needsValue*/ true);
             }
             return ts.visitEachChild(node, destructuringAndImportCallVisitor, context);
@@ -65345,11 +65353,11 @@
                 var importDeclaration = resolver.getReferencedImportDeclaration(node);
                 if (importDeclaration) {
                     if (ts.isImportClause(importDeclaration)) {
-                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent), ts.createIdentifier("default")), 
+                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent), ts.createIdentifier("default")),
                         /*location*/ node);
                     }
                     else if (ts.isImportSpecifier(importDeclaration)) {
-                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent.parent.parent), ts.getSynthesizedClone(importDeclaration.propertyName || importDeclaration.name)), 
+                        return ts.setTextRange(ts.createPropertyAccess(ts.getGeneratedNameForNode(importDeclaration.parent.parent.parent), ts.getSynthesizedClone(importDeclaration.propertyName || importDeclaration.name)),
                         /*location*/ node);
                     }
                 }
@@ -65494,7 +65502,7 @@
                     var statements = [];
                     var statementOffset = ts.addPrologue(statements, node.statements);
                     ts.append(statements, ts.createImportDeclaration(
-                    /*decorators*/ undefined, 
+                    /*decorators*/ undefined,
                     /*modifiers*/ undefined, ts.createImportClause(/*name*/ undefined, ts.createNamespaceImport(externalHelpersModuleName)), ts.createLiteral(ts.externalHelpersModuleNameText)));
                     ts.addRange(statements, ts.visitNodes(node.statements, visitor, ts.isStatement, statementOffset));
                     return ts.updateSourceFileNode(node, ts.setTextRange(ts.createNodeArray(statements), node.statements));
@@ -66000,7 +66008,7 @@
                     sourceMapDir = ts.combinePaths(host.getCommonSourceDirectory(), sourceMapDir);
                     sourceMapData.jsSourceMappingURL = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizePath(filePath)), // get the relative sourceMapDir path based on jsFilePath
                     ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL), // this is where user expects to see sourceMap
-                    host.getCurrentDirectory(), host.getCanonicalFileName, 
+                    host.getCurrentDirectory(), host.getCanonicalFileName,
                     /*isAbsolutePathAnUrl*/ true);
                 }
                 else {
@@ -66203,7 +66211,7 @@
             // If sourceroot option: Use the relative path corresponding to the common directory path
             // otherwise source locations relative to map file location
             var sourcesDirectoryPath = compilerOptions.sourceRoot ? host.getCommonSourceDirectory() : sourceMapDir;
-            var source = ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, currentSource.fileName, host.getCurrentDirectory(), host.getCanonicalFileName, 
+            var source = ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, currentSource.fileName, host.getCurrentDirectory(), host.getCanonicalFileName,
             /*isAbsolutePathAnUrl*/ true);
             sourceMapSourceIndex = ts.indexOf(sourceMapData.sourceMapSources, source);
             if (sourceMapSourceIndex === -1) {
@@ -67034,7 +67042,7 @@
                 }
             }
             function emitEntityName(entityName) {
-                var visibilityResult = resolver.isEntityNameVisible(entityName, 
+                var visibilityResult = resolver.isEntityNameVisible(entityName,
                 // Aliases can be written asynchronously so use correct enclosing declaration
                 entityName.parent.kind === 237 /* ImportEqualsDeclaration */ ? entityName.parent : enclosingDeclaration);
                 handleSymbolAccessibilityError(visibilityResult);
@@ -68308,7 +68316,7 @@
                 ts.forEachEmittedFile(host, getDeclFileName, referencedFile, emitOnlyDtsFiles);
             }
             if (declFileName) {
-                declFileName = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizeSlashes(declarationFilePath)), declFileName, host.getCurrentDirectory(), host.getCanonicalFileName, 
+                declFileName = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizeSlashes(declarationFilePath)), declFileName, host.getCurrentDirectory(), host.getCanonicalFileName,
                 /*isAbsolutePathAnUrl*/ false);
                 referencesOutput += "/// <reference path=\"" + declFileName + "\" />" + newLine;
             }
@@ -74553,7 +74561,7 @@
         if (!sourceFile.jsonObject) {
             return {};
         }
-        return convertObjectLiteralExpressionToJson(sourceFile.jsonObject, knownRootOptions, 
+        return convertObjectLiteralExpressionToJson(sourceFile.jsonObject, knownRootOptions,
         /*extraKeyDiagnosticMessage*/ undefined, /*parentOption*/ undefined);
         function convertObjectLiteralExpressionToJson(node, knownOptions, extraKeyDiagnosticMessage, parentOption) {
             var result = {};
@@ -74648,7 +74656,7 @@
                         return convertObjectLiteralExpressionToJson(objectLiteralExpression, elementOptions, extraKeyDiagnosticMessage, optionName);
                     }
                     else {
-                        return convertObjectLiteralExpressionToJson(objectLiteralExpression, /* knownOptions*/ undefined, 
+                        return convertObjectLiteralExpressionToJson(objectLiteralExpression, /* knownOptions*/ undefined,
                         /*extraKeyDiagnosticMessage */ undefined, /*parentOption*/ undefined);
                     }
                 case 177 /* ArrayLiteralExpression */:
@@ -76509,7 +76517,7 @@
             var children = n.getChildren();
             for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {
                 var child = children_3[_i];
-                var shouldDiveInChildNode = 
+                var shouldDiveInChildNode =
                 // previous token is enclosed somewhere in the child
                 (child.pos <= previousToken.pos && child.end > previousToken.end) ||
                     // previous token ends exactly at the beginning of child
@@ -81766,7 +81774,7 @@
              * Unlike `Search`, there is only one `State`.
              */
             var State = /** @class */ (function () {
-                function State(sourceFiles, 
+                function State(sourceFiles,
                     /** True if we're searching for constructor references. */
                     isForConstructor, checker, cancellationToken, searchMeaning, options, result) {
                     this.sourceFiles = sourceFiles;
@@ -84902,7 +84910,7 @@
                     for (var _i = 0, wordSpans_1 = wordSpans; _i < wordSpans_1.length; _i++) {
                         var span_16 = wordSpans_1[_i];
                         if (partStartsWith(candidate, span_16, chunk.text, /*ignoreCase:*/ true)) {
-                            return createPatternMatch(PatternMatchKind.substring, punctuationStripped, 
+                            return createPatternMatch(PatternMatchKind.substring, punctuationStripped,
                             /*isCaseSensitive:*/ partStartsWith(candidate, span_16, chunk.text, /*ignoreCase:*/ false));
                         }
                     }
@@ -88171,7 +88179,7 @@
 ///<reference path='ruleOperationContext.ts' />
 ///<reference path='rules.ts' />
 ///<reference path='rulesMap.ts' />
-///<reference path='tokenRange.ts' /> 
+///<reference path='tokenRange.ts' />
 /// <reference path="references.ts"/>
 /* @internal */
 var ts;
@@ -90649,9 +90657,9 @@
                 }
                 typeNode = typeNode || ts.createKeywordTypeNode(119 /* AnyKeyword */);
                 var property = ts.createProperty(
-                /*decorators*/ undefined, 
-                /*modifiers*/ makeStatic ? [ts.createToken(115 /* StaticKeyword */)] : undefined, tokenName, 
-                /*questionToken*/ undefined, typeNode, 
+                /*decorators*/ undefined,
+                /*modifiers*/ makeStatic ? [ts.createToken(115 /* StaticKeyword */)] : undefined, tokenName,
+                /*questionToken*/ undefined, typeNode,
                 /*initializer*/ undefined);
                 var propertyChangeTracker = ts.textChanges.ChangeTracker.fromContext(context);
                 propertyChangeTracker.insertNodeAfter(classDeclarationSourceFile, classOpenBrace, property, { suffix: context.newLineCharacter });
@@ -90664,13 +90672,13 @@
                     // Index signatures cannot have the static modifier.
                     var stringTypeNode = ts.createKeywordTypeNode(136 /* StringKeyword */);
                     var indexingParameter = ts.createParameter(
-                    /*decorators*/ undefined, 
-                    /*modifiers*/ undefined, 
-                    /*dotDotDotToken*/ undefined, "x", 
-                    /*questionToken*/ undefined, stringTypeNode, 
+                    /*decorators*/ undefined,
+                    /*modifiers*/ undefined,
+                    /*dotDotDotToken*/ undefined, "x",
+                    /*questionToken*/ undefined, stringTypeNode,
                     /*initializer*/ undefined);
                     var indexSignature = ts.createIndexSignature(
-                    /*decorators*/ undefined, 
+                    /*decorators*/ undefined,
                     /*modifiers*/ undefined, [indexingParameter], typeNode);
                     var indexSignatureChangeTracker = ts.textChanges.ChangeTracker.fromContext(context);
                     indexSignatureChangeTracker.insertNodeAfter(classDeclarationSourceFile, classOpenBrace, indexSignature, { suffix: context.newLineCharacter });
@@ -91425,7 +91433,7 @@
             var lastImportDeclaration = ts.findLast(sourceFile.statements, ts.isAnyImportSyntax);
             var moduleSpecifierWithoutQuotes = ts.stripQuotes(moduleSpecifier);
             var importDecl = ts.createImportDeclaration(
-            /*decorators*/ undefined, 
+            /*decorators*/ undefined,
             /*modifiers*/ undefined, createImportClauseOfKind(kind, symbolName), createStringLiteralWithQuoteStyle(sourceFile, moduleSpecifierWithoutQuotes));
             var changes = ChangeTracker.with(context, function (changeTracker) {
                 if (lastImportDeclaration) {
@@ -91719,7 +91727,7 @@
              */
             return createCodeAction(ts.Diagnostics.Change_0_to_1, [symbolName, namespacePrefix + "." + symbolName], ChangeTracker.with(context, function (tracker) {
                 return tracker.replaceNode(sourceFile, symbolToken, ts.createPropertyAccess(ts.createIdentifier(namespacePrefix), symbolName));
-            }), "CodeChange", 
+            }), "CodeChange",
             /*moduleSpecifier*/ undefined);
         }
         function getImportCodeActions(context) {
@@ -91968,7 +91976,7 @@
                 case 149 /* PropertyDeclaration */:
                     var typeNode = checker.typeToTypeNode(type, enclosingDeclaration);
                     var property = ts.createProperty(
-                    /*decorators*/ undefined, modifiers, name, optional ? ts.createToken(55 /* QuestionToken */) : undefined, typeNode, 
+                    /*decorators*/ undefined, modifiers, name, optional ? ts.createToken(55 /* QuestionToken */) : undefined, typeNode,
                     /*initializer*/ undefined);
                     return property;
                 case 150 /* MethodSignature */:
@@ -92037,10 +92045,10 @@
                 }
             }
             var newMethod = ts.createMethod(
-            /*decorators*/ undefined, 
-            /*modifiers*/ makeStatic ? [ts.createToken(115 /* StaticKeyword */)] : undefined, 
-            /*asteriskToken*/ undefined, methodName, 
-            /*questionToken*/ undefined, typeParameters, parameters, 
+            /*decorators*/ undefined,
+            /*modifiers*/ makeStatic ? [ts.createToken(115 /* StaticKeyword */)] : undefined,
+            /*asteriskToken*/ undefined, methodName,
+            /*questionToken*/ undefined, typeParameters, parameters,
             /*type*/ includeTypeScriptSyntax ? ts.createKeywordTypeNode(119 /* AnyKeyword */) : undefined, createStubbedMethodBody());
             return newMethod;
         }
@@ -92049,12 +92057,12 @@
             var parameters = [];
             for (var i = 0; i < argCount; i++) {
                 var newParameter = ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, 
-                /*dotDotDotToken*/ undefined, 
-                /*name*/ names && names[i] || "arg" + i, 
-                /*questionToken*/ minArgumentCount !== undefined && i >= minArgumentCount ? ts.createToken(55 /* QuestionToken */) : undefined, 
-                /*type*/ addAnyType ? ts.createKeywordTypeNode(119 /* AnyKeyword */) : undefined, 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined,
+                /*dotDotDotToken*/ undefined,
+                /*name*/ names && names[i] || "arg" + i,
+                /*questionToken*/ minArgumentCount !== undefined && i >= minArgumentCount ? ts.createToken(55 /* QuestionToken */) : undefined,
+                /*type*/ addAnyType ? ts.createKeywordTypeNode(119 /* AnyKeyword */) : undefined,
                 /*initializer*/ undefined);
                 parameters.push(newParameter);
             }
@@ -92084,25 +92092,25 @@
             if (someSigHasRestParameter) {
                 var anyArrayType = ts.createArrayTypeNode(ts.createKeywordTypeNode(119 /* AnyKeyword */));
                 var restParameter = ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, ts.createToken(24 /* DotDotDotToken */), maxArgsParameterSymbolNames[maxNonRestArgs] || "rest", 
-                /*questionToken*/ maxNonRestArgs >= minArgumentCount ? ts.createToken(55 /* QuestionToken */) : undefined, anyArrayType, 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined, ts.createToken(24 /* DotDotDotToken */), maxArgsParameterSymbolNames[maxNonRestArgs] || "rest",
+                /*questionToken*/ maxNonRestArgs >= minArgumentCount ? ts.createToken(55 /* QuestionToken */) : undefined, anyArrayType,
                 /*initializer*/ undefined);
                 parameters.push(restParameter);
             }
-            return createStubbedMethod(modifiers, name, optional, 
-            /*typeParameters*/ undefined, parameters, 
+            return createStubbedMethod(modifiers, name, optional,
+            /*typeParameters*/ undefined, parameters,
             /*returnType*/ undefined);
         }
         function createStubbedMethod(modifiers, name, optional, typeParameters, parameters, returnType) {
             return ts.createMethod(
-            /*decorators*/ undefined, modifiers, 
+            /*decorators*/ undefined, modifiers,
             /*asteriskToken*/ undefined, name, optional ? ts.createToken(55 /* QuestionToken */) : undefined, typeParameters, parameters, returnType, createStubbedMethodBody());
         }
         codefix.createStubbedMethod = createStubbedMethod;
         function createStubbedMethodBody() {
-            return ts.createBlock([ts.createThrow(ts.createNew(ts.createIdentifier("Error"), 
-                /*typeArguments*/ undefined, [ts.createLiteral("Method not implemented.")]))], 
+            return ts.createBlock([ts.createThrow(ts.createNew(ts.createIdentifier("Error"),
+                /*typeArguments*/ undefined, [ts.createLiteral("Method not implemented.")]))],
             /*multiline*/ true);
         }
         function createVisibilityModifier(flags) {
@@ -92918,10 +92926,10 @@
             }
             function transformJSDocIndexSignature(node) {
                 var index = ts.createParameter(
-                /*decorators*/ undefined, 
-                /*modifiers*/ undefined, 
-                /*dotDotDotToken*/ undefined, node.typeArguments[0].kind === 133 /* NumberKeyword */ ? "n" : "s", 
-                /*questionToken*/ undefined, ts.createTypeReferenceNode(node.typeArguments[0].kind === 133 /* NumberKeyword */ ? "number" : "string", []), 
+                /*decorators*/ undefined,
+                /*modifiers*/ undefined,
+                /*dotDotDotToken*/ undefined, node.typeArguments[0].kind === 133 /* NumberKeyword */ ? "n" : "s",
+                /*questionToken*/ undefined, ts.createTypeReferenceNode(node.typeArguments[0].kind === 133 /* NumberKeyword */ ? "number" : "string", []),
                 /*initializer*/ undefined);
                 var indexSignature = ts.createTypeLiteralNode([ts.createIndexSignature(/*decorators*/ undefined, /*modifiers*/ undefined, [index], node.typeArguments[1])]);
                 ts.setEmitFlags(indexSignature, 1 /* SingleLine */);
@@ -93074,14 +93082,14 @@
                             ? assignmentBinaryExpression.parent : assignmentBinaryExpression;
                         deleteNode(nodeToDelete);
                         if (!assignmentBinaryExpression.right) {
-                            return ts.createProperty([], modifiers, symbol.name, /*questionToken*/ undefined, 
+                            return ts.createProperty([], modifiers, symbol.name, /*questionToken*/ undefined,
                             /*type*/ undefined, /*initializer*/ undefined);
                         }
                         switch (assignmentBinaryExpression.right.kind) {
                             case 186 /* FunctionExpression */: {
                                 var functionExpression = assignmentBinaryExpression.right;
                                 var fullModifiers = ts.concatenate(modifiers, getModifierKindFromSource(functionExpression, 120 /* AsyncKeyword */));
-                                var method = ts.createMethod(/*decorators*/ undefined, fullModifiers, /*asteriskToken*/ undefined, memberDeclaration.name, /*questionToken*/ undefined, 
+                                var method = ts.createMethod(/*decorators*/ undefined, fullModifiers, /*asteriskToken*/ undefined, memberDeclaration.name, /*questionToken*/ undefined,
                                 /*typeParameters*/ undefined, functionExpression.parameters, /*type*/ undefined, functionExpression.body);
                                 copyComments(assignmentBinaryExpression, method);
                                 return method;
@@ -93099,7 +93107,7 @@
                                     bodyBlock = ts.createBlock([ts.createReturn(expression)]);
                                 }
                                 var fullModifiers = ts.concatenate(modifiers, getModifierKindFromSource(arrowFunction, 120 /* AsyncKeyword */));
-                                var method = ts.createMethod(/*decorators*/ undefined, fullModifiers, /*asteriskToken*/ undefined, memberDeclaration.name, /*questionToken*/ undefined, 
+                                var method = ts.createMethod(/*decorators*/ undefined, fullModifiers, /*asteriskToken*/ undefined, memberDeclaration.name, /*questionToken*/ undefined,
                                 /*typeParameters*/ undefined, arrowFunction.parameters, /*type*/ undefined, bodyBlock);
                                 copyComments(assignmentBinaryExpression, method);
                                 return method;
@@ -93109,7 +93117,7 @@
                                 if (ts.isSourceFileJavaScript(sourceFile)) {
                                     return;
                                 }
-                                var prop = ts.createProperty(/*decorators*/ undefined, modifiers, memberDeclaration.name, /*questionToken*/ undefined, 
+                                var prop = ts.createProperty(/*decorators*/ undefined, modifiers, memberDeclaration.name, /*questionToken*/ undefined,
                                 /*type*/ undefined, assignmentBinaryExpression.right);
                                 copyComments(assignmentBinaryExpression.parent, prop);
                                 return prop;
@@ -93145,7 +93153,7 @@
                         memberElements.unshift(ts.createConstructor(/*decorators*/ undefined, /*modifiers*/ undefined, initializer.parameters, initializer.body));
                     }
                     var modifiers = getModifierKindFromSource(precedingNode, 84 /* ExportKeyword */);
-                    var cls = ts.createClassDeclaration(/*decorators*/ undefined, modifiers, node.name, 
+                    var cls = ts.createClassDeclaration(/*decorators*/ undefined, modifiers, node.name,
                     /*typeParameters*/ undefined, /*heritageClauses*/ undefined, memberElements);
                     // Don't call copyComments here because we'll already leave them in place
                     return cls;
@@ -93156,7 +93164,7 @@
                         memberElements.unshift(ts.createConstructor(/*decorators*/ undefined, /*modifiers*/ undefined, node.parameters, node.body));
                     }
                     var modifiers = getModifierKindFromSource(node, 84 /* ExportKeyword */);
-                    var cls = ts.createClassDeclaration(/*decorators*/ undefined, modifiers, node.name, 
+                    var cls = ts.createClassDeclaration(/*decorators*/ undefined, modifiers, node.name,
                     /*typeParameters*/ undefined, /*heritageClauses*/ undefined, memberElements);
                     // Don't call copyComments here because we'll already leave them in place
                     return cls;
@@ -93765,10 +93773,10 @@
                         typeNode = checker.typeToTypeNode(type, scope, ts.NodeBuilderFlags.NoTruncation);
                     }
                     var paramDecl = ts.createParameter(
-                    /*decorators*/ undefined, 
-                    /*modifiers*/ undefined, 
-                    /*dotDotDotToken*/ undefined, 
-                    /*name*/ name, 
+                    /*decorators*/ undefined,
+                    /*modifiers*/ undefined,
+                    /*dotDotDotToken*/ undefined,
+                    /*name*/ name,
                     /*questionToken*/ undefined, typeNode);
                     parameters.push(paramDecl);
                     if (usage.usage === 2 /* Write */) {
@@ -93805,7 +93813,7 @@
                         modifiers.push(ts.createToken(120 /* AsyncKeyword */));
                     }
                     newFunction = ts.createMethod(
-                    /*decorators*/ undefined, modifiers.length ? modifiers : undefined, range.facts & RangeFacts.IsGenerator ? ts.createToken(39 /* AsteriskToken */) : undefined, functionName, 
+                    /*decorators*/ undefined, modifiers.length ? modifiers : undefined, range.facts & RangeFacts.IsGenerator ? ts.createToken(39 /* AsteriskToken */) : undefined, functionName,
                     /*questionToken*/ undefined, typeParameters, parameters, returnType, body);
                 }
                 else {
@@ -93857,16 +93865,16 @@
                         for (var _i = 0, exposedVariableDeclarations_1 = exposedVariableDeclarations; _i < exposedVariableDeclarations_1.length; _i++) {
                             var variableDeclaration = exposedVariableDeclarations_1[_i];
                             bindingElements.push(ts.createBindingElement(
-                            /*dotDotDotToken*/ undefined, 
-                            /*propertyName*/ undefined, 
+                            /*dotDotDotToken*/ undefined,
+                            /*propertyName*/ undefined,
                             /*name*/ ts.getSynthesizedDeepClone(variableDeclaration.name)));
                             // Being returned through an object literal will have widened the type.
                             var variableType = checker.typeToTypeNode(checker.getBaseTypeOfLiteralType(checker.getTypeAtLocation(variableDeclaration)), scope, ts.NodeBuilderFlags.NoTruncation);
                             typeElements.push(ts.createPropertySignature(
-                            /*modifiers*/ undefined, 
-                            /*name*/ variableDeclaration.symbol.name, 
-                            /*questionToken*/ undefined, 
-                            /*type*/ variableType, 
+                            /*modifiers*/ undefined,
+                            /*name*/ variableDeclaration.symbol.name,
+                            /*questionToken*/ undefined,
+                            /*type*/ variableType,
                             /*initializer*/ undefined));
                             sawExplicitType = sawExplicitType || variableDeclaration.type !== undefined;
                             commonNodeFlags = commonNodeFlags & variableDeclaration.parent.flags;
@@ -93876,8 +93884,8 @@
                             ts.setEmitFlags(typeLiteral, 1 /* SingleLine */);
                         }
                         newNodes.push(ts.createVariableStatement(
-                        /*modifiers*/ undefined, ts.createVariableDeclarationList([ts.createVariableDeclaration(ts.createObjectBindingPattern(bindingElements), 
-                            /*type*/ typeLiteral, 
+                        /*modifiers*/ undefined, ts.createVariableDeclarationList([ts.createVariableDeclaration(ts.createObjectBindingPattern(bindingElements),
+                            /*type*/ typeLiteral,
                             /*initializer*/ call)], commonNodeFlags)));
                     }
                 }
@@ -93983,7 +93991,7 @@
                     }
                     modifiers.push(ts.createToken(131 /* ReadonlyKeyword */));
                     var newVariable = ts.createProperty(
-                    /*decorators*/ undefined, modifiers, localNameText, 
+                    /*decorators*/ undefined, modifiers, localNameText,
                     /*questionToken*/ undefined, variableType, initializer);
                     var localReference = ts.createPropertyAccess(rangeFacts & RangeFacts.InStaticRegion
                         ? ts.createIdentifier(scope.name.getText())
@@ -97530,14 +97538,14 @@
         };
         LanguageServiceShimObject.prototype.getEncodedSyntacticClassifications = function (fileName, start, length) {
             var _this = this;
-            return this.forwardJSONCall("getEncodedSyntacticClassifications('" + fileName + "', " + start + ", " + length + ")", 
+            return this.forwardJSONCall("getEncodedSyntacticClassifications('" + fileName + "', " + start + ", " + length + ")",
             // directly serialize the spans out to a string.  This is much faster to decode
             // on the managed side versus a full JSON array.
             function () { return convertClassifications(_this.languageService.getEncodedSyntacticClassifications(fileName, ts.createTextSpan(start, length))); });
         };
         LanguageServiceShimObject.prototype.getEncodedSemanticClassifications = function (fileName, start, length) {
             var _this = this;
-            return this.forwardJSONCall("getEncodedSemanticClassifications('" + fileName + "', " + start + ", " + length + ")", 
+            return this.forwardJSONCall("getEncodedSemanticClassifications('" + fileName + "', " + start + ", " + length + ")",
             // directly serialize the spans out to a string.  This is much faster to decode
             // on the managed side versus a full JSON array.
             function () { return convertClassifications(_this.languageService.getEncodedSemanticClassifications(fileName, ts.createTextSpan(start, length))); });
@@ -97744,7 +97752,7 @@
         };
         LanguageServiceShimObject.prototype.getEmitOutputObject = function (fileName) {
             var _this = this;
-            return forwardCall(this.logger, "getEmitOutput('" + fileName + "')", 
+            return forwardCall(this.logger, "getEmitOutput('" + fileName + "')",
             /*returnJson*/ false, function () { return _this.languageService.getEmitOutput(fileName); }, this.logPerformance);
         };
         return LanguageServiceShimObject;
